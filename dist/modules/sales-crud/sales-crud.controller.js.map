{"version":3,"sources":["../../../src/modules/sales-crud/sales-crud.controller.ts"],"sourcesContent":["import {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Body,\r\n  Param,\r\n  Put,\r\n  Delete,\r\n  Query,\r\n  Req,\r\n  UseGuards,\r\n  ParseIntPipe,\r\n} from '@nestjs/common';\r\nimport { SalesCrudService } from './sales-crud.service';\r\nimport { CreateSalesCrudDto } from './dto/create-sales-crud.dto';\r\nimport { UpdateSalesCrudDto } from './dto/update-sales-crud.dto';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport {\r\n  ApiTags,\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiBody,\r\n  ApiParam,\r\n  ApiQuery,\r\n} from '@nestjs/swagger';\r\n\r\n@ApiTags('Sales Orders')\r\n@ApiBearerAuth()\r\n@UseGuards(JwtAuthGuard)\r\n@Controller('sales-crud')\r\nexport class SalesCrudController {\r\n  constructor(private readonly service: SalesCrudService) {}\r\n\r\n  @Post()\r\n  @Roles('SALES')\r\n  @ApiOperation({ summary: 'Create a new sales order' })\r\n  @ApiBody({ type: CreateSalesCrudDto })\r\n  @ApiResponse({ status: 201, description: 'Sales order created successfully' })\r\n  @ApiResponse({ status: 400, description: 'Bad request (validation/business error)' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden' })\r\n  @ApiResponse({ status: 409, description: 'Conflict (duplicate order)' })\r\n  @ApiResponse({ status: 500, description: 'Internal server error' })\r\n  create(@Body() dto: CreateSalesCrudDto, @Req() req) {\r\n    return this.service.create(dto, req.user.userId);\r\n  }\r\n\r\n  @Get()\r\n  @Roles('SALES')\r\n  @ApiOperation({ summary: 'Get paginated sales orders for the user' })\r\n  @ApiQuery({ name: 'page', required: false, example: 1 })\r\n  @ApiQuery({ name: 'limit', required: false, example: 10 })\r\n  @ApiQuery({ name: 'search', required: false, example: 'SO123' })\r\n  @ApiResponse({ status: 200, description: 'Sales orders retrieved' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden' })\r\n  @ApiResponse({ status: 500, description: 'Internal server error' })\r\n  findAll(\r\n    @Req() req,\r\n    @Query('page') page: string = '1',\r\n    @Query('limit') limit: string = '10',\r\n    @Query('search') search?: string,\r\n  ) {\r\n    const pageNumber = Number(page) || 1;\r\n    const pageSize = Number(limit) || 10;\r\n    return this.service.getPaginatedOrders(\r\n      pageNumber,\r\n      pageSize,\r\n      req.user.userId,\r\n      search,\r\n    );\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles('SALES')\r\n  @ApiOperation({ summary: 'Get a specific sales order by ID' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  @ApiResponse({ status: 200, description: 'Sales order found' })\r\n  @ApiResponse({ status: 404, description: 'Not found or access denied' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden' })\r\n  @ApiResponse({ status: 500, description: 'Internal server error' })\r\n  findOne(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Req() req,\r\n  ) {\r\n    return this.service.findOne(id, req.user.userId);\r\n  }\r\n\r\n  @Put(':id')\r\n  @Roles('SALES')\r\n  @ApiOperation({ summary: 'Update a specific sales order by ID' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  @ApiBody({ type: UpdateSalesCrudDto })\r\n  @ApiResponse({ status: 200, description: 'Sales order updated' })\r\n  @ApiResponse({ status: 400, description: 'Bad request (validation/business error)' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden' })\r\n  @ApiResponse({ status: 404, description: 'Not found' })\r\n  @ApiResponse({ status: 409, description: 'Conflict (unique constraint)' })\r\n  @ApiResponse({ status: 500, description: 'Internal server error' })\r\n  update(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Body() dto: UpdateSalesCrudDto,\r\n    @Req() req,\r\n  ) {\r\n    return this.service.update(id, dto, req.user.userId);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles('SALES')\r\n  @ApiOperation({ summary: 'Delete a sales order by ID' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  @ApiResponse({ status: 200, description: 'Sales order deleted' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden' })\r\n  @ApiResponse({ status: 404, description: 'Not found' })\r\n  @ApiResponse({ status: 500, description: 'Internal server error' })\r\n  remove(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Req() req,\r\n  ) {\r\n    return this.service.remove(id, req.user.userId);\r\n  }\r\n}\r\n"],"names":["SalesCrudController","create","dto","req","service","user","userId","findAll","page","limit","search","pageNumber","Number","pageSize","getPaginatedOrders","findOne","id","update","remove","summary","type","CreateSalesCrudDto","status","description","name","required","example","UpdateSalesCrudDto"],"mappings":";;;;+BAgCaA;;;eAAAA;;;wBApBN;kCAC0B;oCACE;oCACA;8BACN;gCACP;yBASf;;;;;;;;;;;;;;;AAMA,IAAA,AAAMA,sBAAN,MAAMA;IAYXC,OAAO,AAAQC,GAAuB,EAAE,AAAOC,GAAG,EAAE;QAClD,OAAO,IAAI,CAACC,OAAO,CAACH,MAAM,CAACC,KAAKC,IAAIE,IAAI,CAACC,MAAM;IACjD;IAWAC,QACE,AAAOJ,GAAG,EACV,AAAeK,OAAe,GAAG,EACjC,AAAgBC,QAAgB,IAAI,EACpC,AAAiBC,MAAe,EAChC;QACA,MAAMC,aAAaC,OAAOJ,SAAS;QACnC,MAAMK,WAAWD,OAAOH,UAAU;QAClC,OAAO,IAAI,CAACL,OAAO,CAACU,kBAAkB,CACpCH,YACAE,UACAV,IAAIE,IAAI,CAACC,MAAM,EACfI;IAEJ;IAUAK,QACE,AAA2BC,EAAU,EACrC,AAAOb,GAAG,EACV;QACA,OAAO,IAAI,CAACC,OAAO,CAACW,OAAO,CAACC,IAAIb,IAAIE,IAAI,CAACC,MAAM;IACjD;IAaAW,OACE,AAA2BD,EAAU,EACrC,AAAQd,GAAuB,EAC/B,AAAOC,GAAG,EACV;QACA,OAAO,IAAI,CAACC,OAAO,CAACa,MAAM,CAACD,IAAId,KAAKC,IAAIE,IAAI,CAACC,MAAM;IACrD;IAUAY,OACE,AAA2BF,EAAU,EACrC,AAAOb,GAAG,EACV;QACA,OAAO,IAAI,CAACC,OAAO,CAACc,MAAM,CAACF,IAAIb,IAAIE,IAAI,CAACC,MAAM;IAChD;IAvFA,YAAY,AAAiBF,OAAyB,CAAE;aAA3BA,UAAAA;IAA4B;AAwF3D;;;;;QApFkBe,SAAS;;;QACdC,MAAMC,sCAAkB;;;QACpBC,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;;;;QAOzBJ,SAAS;;;QACbK,MAAM;QAAQC,UAAU;QAAOC,SAAS;;;QACxCF,MAAM;QAASC,UAAU;QAAOC,SAAS;;;QACzCF,MAAM;QAAUC,UAAU;QAAOC,SAAS;;;QACvCJ,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;;;;;;;;QAmBzBJ,SAAS;;;QACbK,MAAM;QAAMJ,MAAMR;;;QACfU,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;;;;QAUzBJ,SAAS;;;QACbK,MAAM;QAAMJ,MAAMR;;;QACnBQ,MAAMO,sCAAkB;;;QACpBL,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;;;;;;QAWzBJ,SAAS;;;QACbK,MAAM;QAAMJ,MAAMR;;;QACfU,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa"}