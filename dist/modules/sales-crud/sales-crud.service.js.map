{"version":3,"sources":["../../../src/modules/sales-crud/sales-crud.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  ConflictException,\r\n  InternalServerErrorException,\r\n} from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport { CreateSalesCrudDto } from './dto/create-sales-crud.dto';\r\nimport { UpdateSalesCrudDto } from './dto/update-sales-crud.dto';\r\nimport { Prisma } from '@prisma/client';\r\n\r\n@Injectable()\r\nexport class SalesCrudService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  async create(dto: CreateSalesCrudDto, userId: number) {\r\n    const existingOrder = await this.prisma.salesOrder.findFirst({\r\n      where: {\r\n        OR: [\r\n          { saleOrderNumber: dto.saleOrderNumber },\r\n          { outboundDelivery: dto.outboundDelivery },\r\n          { transferOrder: dto.transferOrder },\r\n        ],\r\n      },\r\n    });\r\n\r\n    if (existingOrder) {\r\n      if (existingOrder.saleOrderNumber === dto.saleOrderNumber) {\r\n        throw new ConflictException(\r\n          'An order with this Sale Order Number already exists.',\r\n        );\r\n      }\r\n      if (existingOrder.outboundDelivery === dto.outboundDelivery) {\r\n        throw new ConflictException(\r\n          'An order with this Outbound Delivery number already exists.',\r\n        );\r\n      }\r\n      if (existingOrder.transferOrder === dto.transferOrder) {\r\n        throw new ConflictException(\r\n          'An order with this Transfer Order number already exists.',\r\n        );\r\n      }\r\n    }\r\n\r\n    try {\r\n      const deliveryDate =\r\n        dto.deliveryDate && dto.deliveryDate.length === 10\r\n          ? new Date(dto.deliveryDate).toISOString()\r\n          : dto.deliveryDate;\r\n\r\n      return await this.prisma.salesOrder.create({\r\n        data: {\r\n          ...dto,\r\n          deliveryDate,\r\n          userId,\r\n          status: 'R105',\r\n          assignedUserId: null,\r\n          customerId: dto.customerId,\r\n          printerId: null,\r\n        },\r\n        include: { customer: true },\r\n      });\r\n    } catch (err: any) {\r\n      throw new InternalServerErrorException(\r\n        'Failed to create sales order.',\r\n        err.message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async findAll(userId: number, query: { search?: string }) {\r\n    try {\r\n      const { search } = query;\r\n      const where: any = { userId }; \r\n\r\n      if (search) {\r\n        const s = { contains: search, mode: 'insensitive' };\r\n        where.OR = [\r\n          { saleOrderNumber: s },\r\n          { outboundDelivery: s },\r\n          { transferOrder: s },\r\n          { status: s },\r\n          { specialRemarks: s },\r\n          ...(['true', 'false'].includes(search.toLowerCase())\r\n            ? [{ paymentClearance: search.toLowerCase() === 'true' }]\r\n            : []),\r\n          { customer: { is: { name: s } } },\r\n          { product: { is: { name: s } } },\r\n          { transporter: { is: { name: s } } },\r\n          { plantCode: { is: { code: s } } },\r\n          { salesZone: { is: { name: s } } },\r\n          { packConfig: { is: { configName: s } } },\r\n        ];\r\n      }\r\n\r\n      return await this.prisma.salesOrder.findMany({\r\n        where,\r\n        orderBy: { createdAt: 'desc' },\r\n        include: {\r\n          customer: true,\r\n          product: true,\r\n          transporter: true,\r\n          plantCode: true,\r\n          salesZone: true,\r\n          packConfig: true,\r\n        },\r\n      });\r\n    } catch (err: any) {\r\n      throw new InternalServerErrorException(\r\n        'Failed to fetch sales orders.',\r\n        err.message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async findOne(id: number, userId: number) {\r\n    try {\r\n      const order = await this.prisma.salesOrder.findUnique({\r\n        where: { id },\r\n        include: {\r\n          customer: true,\r\n          product: true,\r\n          transporter: true,\r\n          plantCode: true,\r\n          salesZone: true,\r\n          packConfig: true,\r\n        },\r\n      });\r\n      if (!order || order.userId !== userId) {\r\n        throw new NotFoundException('Sales order not found or access denied.');\r\n      }\r\n      return order;\r\n    } catch (err) {\r\n      if (err instanceof NotFoundException) throw err;\r\n      throw new InternalServerErrorException(\r\n        'Failed to retrieve sales order.',\r\n        (err as Error).message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async update(\r\n    id: number,\r\n    dto: UpdateSalesCrudDto,\r\n    userId: number,\r\n  ) {\r\n    const existing = await this.prisma.salesOrder.findFirst({ where: { id, userId } });\r\n    if (!existing) {\r\n      throw new NotFoundException('Sales order not found or access denied.');\r\n    }\r\n\r\n    try {\r\n      const deliveryDate =\r\n        dto.deliveryDate && dto.deliveryDate.length === 10\r\n          ? new Date(dto.deliveryDate).toISOString()\r\n          : dto.deliveryDate;\r\n\r\n      return await this.prisma.salesOrder.update({\r\n        where: { id },\r\n        data: { ...dto, deliveryDate },\r\n        include: {\r\n          customer: true,\r\n          product: true,\r\n          transporter: true,\r\n          plantCode: true,\r\n          salesZone: true,\r\n          packConfig: true,\r\n        },\r\n      });\r\n    } catch (err: any) {\r\n      if (err instanceof Prisma.PrismaClientKnownRequestError) {\r\n        if (err.code === 'P2025') {\r\n          throw new NotFoundException('Sales order not found.');\r\n        }\r\n        if (err.code === 'P2002') {\r\n          throw new ConflictException(\r\n            'Update would violate a unique constraint.',\r\n          );\r\n        }\r\n      }\r\n      throw new InternalServerErrorException(\r\n        'Failed to update sales order.',\r\n        err.message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async remove(id: number, userId: number) {\r\n    const existing = await this.prisma.salesOrder.findFirst({ where: { id, userId } });\r\n    if (!existing) {\r\n      throw new NotFoundException('Sales order not found or access denied.');\r\n    }\r\n\r\n    try {\r\n      await this.prisma.salesOrder.delete({ where: { id } });\r\n    } catch (err: any) {\r\n      if (err instanceof Prisma.PrismaClientKnownRequestError && err.code === 'P2025') {\r\n        throw new NotFoundException('Sales order not found.');\r\n      }\r\n      throw new InternalServerErrorException(\r\n        'Failed to delete sales order.',\r\n        err.message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async getPaginatedOrders(\r\n    page: number,\r\n    limit: number,\r\n    userId: number,\r\n    search?: string,\r\n  ) {\r\n    try {\r\n      const skip = (page - 1) * limit;\r\n      const whereClause: any = { userId }; \r\n\r\n      if (search) {\r\n        const s = { contains: search, mode: 'insensitive' };\r\n        whereClause.OR = [\r\n          { saleOrderNumber: s },\r\n          { outboundDelivery: s },\r\n          { transferOrder: s },\r\n          { status: s },\r\n          { specialRemarks: s },\r\n          ...(['true', 'false'].includes(search.toLowerCase())\r\n            ? [{ paymentClearance: search.toLowerCase() === 'true' }]\r\n            : []),\r\n          { customer: { is: { name: s } } },\r\n          { product: { is: { name: s } } },\r\n          { transporter: { is: { name: s } } },\r\n          { plantCode: { is: { code: s } } },\r\n          { salesZone: { is: { name: s } } },\r\n          { packConfig: { is: { configName: s } } },\r\n        ];\r\n      }\r\n\r\n      const [orders, totalCount] = await this.prisma.$transaction([\r\n        this.prisma.salesOrder.findMany({\r\n          where: whereClause,\r\n          skip,\r\n          take: limit,\r\n          orderBy: { createdAt: 'desc' },\r\n          include: {\r\n            customer: true,\r\n            product: true,\r\n            transporter: true,\r\n            plantCode: true,\r\n            salesZone: true,\r\n            packConfig: true,\r\n            assignedUser: true,\r\n          },\r\n        }),\r\n        this.prisma.salesOrder.count({ where: whereClause }),\r\n      ]);\r\n\r\n      return { orders, totalCount };\r\n    } catch (err: any) {\r\n      throw new InternalServerErrorException(\r\n        'Failed to fetch paginated sales orders.',\r\n        err.message,\r\n      );\r\n    }\r\n  }\r\n}"],"names":["SalesCrudService","create","dto","userId","existingOrder","prisma","salesOrder","findFirst","where","OR","saleOrderNumber","outboundDelivery","transferOrder","ConflictException","deliveryDate","length","Date","toISOString","data","status","assignedUserId","customerId","printerId","include","customer","err","InternalServerErrorException","message","findAll","query","search","s","contains","mode","specialRemarks","includes","toLowerCase","paymentClearance","is","name","product","transporter","plantCode","code","salesZone","packConfig","configName","findMany","orderBy","createdAt","findOne","id","order","findUnique","NotFoundException","update","existing","Prisma","PrismaClientKnownRequestError","remove","delete","getPaginatedOrders","page","limit","skip","whereClause","orders","totalCount","$transaction","take","assignedUser","count"],"mappings":";;;;+BAYaA;;;eAAAA;;;wBAPN;+BACuB;wBAGP;;;;;;;;;;AAGhB,IAAA,AAAMA,mBAAN,MAAMA;IAGX,MAAMC,OAAOC,GAAuB,EAAEC,MAAc,EAAE;QACpD,MAAMC,gBAAgB,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,SAAS,CAAC;YAC3DC,OAAO;gBACLC,IAAI;oBACF;wBAAEC,iBAAiBR,IAAIQ,eAAe;oBAAC;oBACvC;wBAAEC,kBAAkBT,IAAIS,gBAAgB;oBAAC;oBACzC;wBAAEC,eAAeV,IAAIU,aAAa;oBAAC;iBACpC;YACH;QACF;QAEA,IAAIR,eAAe;YACjB,IAAIA,cAAcM,eAAe,KAAKR,IAAIQ,eAAe,EAAE;gBACzD,MAAM,IAAIG,yBAAiB,CACzB;YAEJ;YACA,IAAIT,cAAcO,gBAAgB,KAAKT,IAAIS,gBAAgB,EAAE;gBAC3D,MAAM,IAAIE,yBAAiB,CACzB;YAEJ;YACA,IAAIT,cAAcQ,aAAa,KAAKV,IAAIU,aAAa,EAAE;gBACrD,MAAM,IAAIC,yBAAiB,CACzB;YAEJ;QACF;QAEA,IAAI;YACF,MAAMC,eACJZ,IAAIY,YAAY,IAAIZ,IAAIY,YAAY,CAACC,MAAM,KAAK,KAC5C,IAAIC,KAAKd,IAAIY,YAAY,EAAEG,WAAW,KACtCf,IAAIY,YAAY;YAEtB,OAAO,MAAM,IAAI,CAACT,MAAM,CAACC,UAAU,CAACL,MAAM,CAAC;gBACzCiB,MAAM;oBACJ,GAAGhB,GAAG;oBACNY;oBACAX;oBACAgB,QAAQ;oBACRC,gBAAgB;oBAChBC,YAAYnB,IAAImB,UAAU;oBAC1BC,WAAW;gBACb;gBACAC,SAAS;oBAAEC,UAAU;gBAAK;YAC5B;QACF,EAAE,OAAOC,KAAU;YACjB,MAAM,IAAIC,oCAA4B,CACpC,iCACAD,IAAIE,OAAO;QAEf;IACF;IAEA,MAAMC,QAAQzB,MAAc,EAAE0B,KAA0B,EAAE;QACxD,IAAI;YACF,MAAM,EAAEC,MAAM,EAAE,GAAGD;YACnB,MAAMrB,QAAa;gBAAEL;YAAO;YAE5B,IAAI2B,QAAQ;gBACV,MAAMC,IAAI;oBAAEC,UAAUF;oBAAQG,MAAM;gBAAc;gBAClDzB,MAAMC,EAAE,GAAG;oBACT;wBAAEC,iBAAiBqB;oBAAE;oBACrB;wBAAEpB,kBAAkBoB;oBAAE;oBACtB;wBAAEnB,eAAemB;oBAAE;oBACnB;wBAAEZ,QAAQY;oBAAE;oBACZ;wBAAEG,gBAAgBH;oBAAE;uBAChB;wBAAC;wBAAQ;qBAAQ,CAACI,QAAQ,CAACL,OAAOM,WAAW,MAC7C;wBAAC;4BAAEC,kBAAkBP,OAAOM,WAAW,OAAO;wBAAO;qBAAE,GACvD,EAAE;oBACN;wBAAEZ,UAAU;4BAAEc,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBAChC;wBAAES,SAAS;4BAAEF,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBAC/B;wBAAEU,aAAa;4BAAEH,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBACnC;wBAAEW,WAAW;4BAAEJ,IAAI;gCAAEK,MAAMZ;4BAAE;wBAAE;oBAAE;oBACjC;wBAAEa,WAAW;4BAAEN,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBACjC;wBAAEc,YAAY;4BAAEP,IAAI;gCAAEQ,YAAYf;4BAAE;wBAAE;oBAAE;iBACzC;YACH;YAEA,OAAO,MAAM,IAAI,CAAC1B,MAAM,CAACC,UAAU,CAACyC,QAAQ,CAAC;gBAC3CvC;gBACAwC,SAAS;oBAAEC,WAAW;gBAAO;gBAC7B1B,SAAS;oBACPC,UAAU;oBACVgB,SAAS;oBACTC,aAAa;oBACbC,WAAW;oBACXE,WAAW;oBACXC,YAAY;gBACd;YACF;QACF,EAAE,OAAOpB,KAAU;YACjB,MAAM,IAAIC,oCAA4B,CACpC,iCACAD,IAAIE,OAAO;QAEf;IACF;IAEA,MAAMuB,QAAQC,EAAU,EAAEhD,MAAc,EAAE;QACxC,IAAI;YACF,MAAMiD,QAAQ,MAAM,IAAI,CAAC/C,MAAM,CAACC,UAAU,CAAC+C,UAAU,CAAC;gBACpD7C,OAAO;oBAAE2C;gBAAG;gBACZ5B,SAAS;oBACPC,UAAU;oBACVgB,SAAS;oBACTC,aAAa;oBACbC,WAAW;oBACXE,WAAW;oBACXC,YAAY;gBACd;YACF;YACA,IAAI,CAACO,SAASA,MAAMjD,MAAM,KAAKA,QAAQ;gBACrC,MAAM,IAAImD,yBAAiB,CAAC;YAC9B;YACA,OAAOF;QACT,EAAE,OAAO3B,KAAK;YACZ,IAAIA,eAAe6B,yBAAiB,EAAE,MAAM7B;YAC5C,MAAM,IAAIC,oCAA4B,CACpC,mCACA,AAACD,IAAcE,OAAO;QAE1B;IACF;IAEA,MAAM4B,OACJJ,EAAU,EACVjD,GAAuB,EACvBC,MAAc,EACd;QACA,MAAMqD,WAAW,MAAM,IAAI,CAACnD,MAAM,CAACC,UAAU,CAACC,SAAS,CAAC;YAAEC,OAAO;gBAAE2C;gBAAIhD;YAAO;QAAE;QAChF,IAAI,CAACqD,UAAU;YACb,MAAM,IAAIF,yBAAiB,CAAC;QAC9B;QAEA,IAAI;YACF,MAAMxC,eACJZ,IAAIY,YAAY,IAAIZ,IAAIY,YAAY,CAACC,MAAM,KAAK,KAC5C,IAAIC,KAAKd,IAAIY,YAAY,EAAEG,WAAW,KACtCf,IAAIY,YAAY;YAEtB,OAAO,MAAM,IAAI,CAACT,MAAM,CAACC,UAAU,CAACiD,MAAM,CAAC;gBACzC/C,OAAO;oBAAE2C;gBAAG;gBACZjC,MAAM;oBAAE,GAAGhB,GAAG;oBAAEY;gBAAa;gBAC7BS,SAAS;oBACPC,UAAU;oBACVgB,SAAS;oBACTC,aAAa;oBACbC,WAAW;oBACXE,WAAW;oBACXC,YAAY;gBACd;YACF;QACF,EAAE,OAAOpB,KAAU;YACjB,IAAIA,eAAegC,cAAM,CAACC,6BAA6B,EAAE;gBACvD,IAAIjC,IAAIkB,IAAI,KAAK,SAAS;oBACxB,MAAM,IAAIW,yBAAiB,CAAC;gBAC9B;gBACA,IAAI7B,IAAIkB,IAAI,KAAK,SAAS;oBACxB,MAAM,IAAI9B,yBAAiB,CACzB;gBAEJ;YACF;YACA,MAAM,IAAIa,oCAA4B,CACpC,iCACAD,IAAIE,OAAO;QAEf;IACF;IAEA,MAAMgC,OAAOR,EAAU,EAAEhD,MAAc,EAAE;QACvC,MAAMqD,WAAW,MAAM,IAAI,CAACnD,MAAM,CAACC,UAAU,CAACC,SAAS,CAAC;YAAEC,OAAO;gBAAE2C;gBAAIhD;YAAO;QAAE;QAChF,IAAI,CAACqD,UAAU;YACb,MAAM,IAAIF,yBAAiB,CAAC;QAC9B;QAEA,IAAI;YACF,MAAM,IAAI,CAACjD,MAAM,CAACC,UAAU,CAACsD,MAAM,CAAC;gBAAEpD,OAAO;oBAAE2C;gBAAG;YAAE;QACtD,EAAE,OAAO1B,KAAU;YACjB,IAAIA,eAAegC,cAAM,CAACC,6BAA6B,IAAIjC,IAAIkB,IAAI,KAAK,SAAS;gBAC/E,MAAM,IAAIW,yBAAiB,CAAC;YAC9B;YACA,MAAM,IAAI5B,oCAA4B,CACpC,iCACAD,IAAIE,OAAO;QAEf;IACF;IAEA,MAAMkC,mBACJC,IAAY,EACZC,KAAa,EACb5D,MAAc,EACd2B,MAAe,EACf;QACA,IAAI;YACF,MAAMkC,OAAO,AAACF,CAAAA,OAAO,CAAA,IAAKC;YAC1B,MAAME,cAAmB;gBAAE9D;YAAO;YAElC,IAAI2B,QAAQ;gBACV,MAAMC,IAAI;oBAAEC,UAAUF;oBAAQG,MAAM;gBAAc;gBAClDgC,YAAYxD,EAAE,GAAG;oBACf;wBAAEC,iBAAiBqB;oBAAE;oBACrB;wBAAEpB,kBAAkBoB;oBAAE;oBACtB;wBAAEnB,eAAemB;oBAAE;oBACnB;wBAAEZ,QAAQY;oBAAE;oBACZ;wBAAEG,gBAAgBH;oBAAE;uBAChB;wBAAC;wBAAQ;qBAAQ,CAACI,QAAQ,CAACL,OAAOM,WAAW,MAC7C;wBAAC;4BAAEC,kBAAkBP,OAAOM,WAAW,OAAO;wBAAO;qBAAE,GACvD,EAAE;oBACN;wBAAEZ,UAAU;4BAAEc,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBAChC;wBAAES,SAAS;4BAAEF,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBAC/B;wBAAEU,aAAa;4BAAEH,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBACnC;wBAAEW,WAAW;4BAAEJ,IAAI;gCAAEK,MAAMZ;4BAAE;wBAAE;oBAAE;oBACjC;wBAAEa,WAAW;4BAAEN,IAAI;gCAAEC,MAAMR;4BAAE;wBAAE;oBAAE;oBACjC;wBAAEc,YAAY;4BAAEP,IAAI;gCAAEQ,YAAYf;4BAAE;wBAAE;oBAAE;iBACzC;YACH;YAEA,MAAM,CAACmC,QAAQC,WAAW,GAAG,MAAM,IAAI,CAAC9D,MAAM,CAAC+D,YAAY,CAAC;gBAC1D,IAAI,CAAC/D,MAAM,CAACC,UAAU,CAACyC,QAAQ,CAAC;oBAC9BvC,OAAOyD;oBACPD;oBACAK,MAAMN;oBACNf,SAAS;wBAAEC,WAAW;oBAAO;oBAC7B1B,SAAS;wBACPC,UAAU;wBACVgB,SAAS;wBACTC,aAAa;wBACbC,WAAW;wBACXE,WAAW;wBACXC,YAAY;wBACZyB,cAAc;oBAChB;gBACF;gBACA,IAAI,CAACjE,MAAM,CAACC,UAAU,CAACiE,KAAK,CAAC;oBAAE/D,OAAOyD;gBAAY;aACnD;YAED,OAAO;gBAAEC;gBAAQC;YAAW;QAC9B,EAAE,OAAO1C,KAAU;YACjB,MAAM,IAAIC,oCAA4B,CACpC,2CACAD,IAAIE,OAAO;QAEf;IACF;IAzPA,YAAY,AAAiBtB,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;AA0PvD"}