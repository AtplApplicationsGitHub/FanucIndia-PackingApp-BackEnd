{"version":3,"sources":["../../../src/modules/auth/auth.controller.ts"],"sourcesContent":["import {\r\n  Controller,\r\n  Post,\r\n  Body,\r\n  Get,\r\n  Query,\r\n  Req,\r\n} from '@nestjs/common'\r\nimport { Request } from 'express'\r\nimport { AuthService } from './auth.service'\r\nimport { SignupDto } from './dto/signup.dto'\r\nimport { LoginDto } from './dto/login.dto'\r\nimport {\r\n  ApiTags,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiBody,\r\n  ApiQuery,\r\n} from '@nestjs/swagger'\r\nimport { Public } from './public.decorator'\r\n\r\n@ApiTags('Auth')\r\n@Controller('auth')\r\nexport class AuthController {\r\n  constructor(private readonly authService: AuthService) {}\r\n\r\n  @Public()\r\n  @Post('signup')\r\n  @ApiOperation({ summary: 'Register a new user (sales or admin)' })\r\n  @ApiBody({ type: SignupDto })\r\n  @ApiResponse({ status: 201, description: 'User signed up successfully' })\r\n  @ApiResponse({ status: 409, description: 'Email already in use' })\r\n  signup(\r\n    @Body() dto: SignupDto,\r\n    @Req() req: Request,\r\n  ) {\r\n    return this.authService.signup(dto, req)\r\n  }\r\n\r\n  @Public()\r\n  @Post('login')\r\n  @ApiOperation({ summary: 'Login an existing user and receive JWT' })\r\n  @ApiBody({ type: LoginDto })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Login successful, returns JWT token',\r\n  })\r\n  @ApiResponse({ status: 401, description: 'Invalid email or password' })\r\n  login(\r\n    @Body() dto: LoginDto,\r\n    @Req() req: Request,\r\n  ) {\r\n    return this.authService.login(dto, req)\r\n  }\r\n\r\n  @Public()\r\n  @Get('check-email')\r\n  @ApiOperation({ summary: 'Check if an email is already registered' })\r\n  @ApiQuery({\r\n    name: 'email',\r\n    required: true,\r\n    description: 'Email to check',\r\n    type: String,\r\n  })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Returns whether email exists or not',\r\n  })\r\n  checkEmail(@Query('email') email: string) {\r\n    if (!email) return { exists: false }\r\n    return this.authService.checkEmailExists(email).then((exists) => ({\r\n      exists,\r\n    }))\r\n  }\r\n}\r\n"],"names":["AuthController","signup","dto","req","authService","login","checkEmail","email","exists","checkEmailExists","then","summary","type","SignupDto","status","description","LoginDto","name","required","String"],"mappings":";;;;+BAuBaA;;;eAAAA;;;wBAhBN;yBACiB;6BACI;2BACF;0BACD;yBAOlB;iCACgB;;;;;;;;;;;;;;;AAIhB,IAAA,AAAMA,iBAAN,MAAMA;IASXC,OACE,AAAQC,GAAc,EACtB,AAAOC,GAAY,EACnB;QACA,OAAO,IAAI,CAACC,WAAW,CAACH,MAAM,CAACC,KAAKC;IACtC;IAWAE,MACE,AAAQH,GAAa,EACrB,AAAOC,GAAY,EACnB;QACA,OAAO,IAAI,CAACC,WAAW,CAACC,KAAK,CAACH,KAAKC;IACrC;IAeAG,WAAW,AAAgBC,KAAa,EAAE;QACxC,IAAI,CAACA,OAAO,OAAO;YAAEC,QAAQ;QAAM;QACnC,OAAO,IAAI,CAACJ,WAAW,CAACK,gBAAgB,CAACF,OAAOG,IAAI,CAAC,CAACF,SAAY,CAAA;gBAChEA;YACF,CAAA;IACF;IAjDA,YAAY,AAAiBJ,WAAwB,CAAE;aAA1BA,cAAAA;IAA2B;AAkD1D;;;;;QA9CkBO,SAAS;;;QACdC,MAAMC,oBAAS;;;QACXC,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;;;;QAUzBJ,SAAS;;;QACdC,MAAMI,kBAAQ;;;QAEvBF,QAAQ;QACRC,aAAa;;;QAEAD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;;;;QAUzBJ,SAAS;;;QAEvBM,MAAM;QACNC,UAAU;QACVH,aAAa;QACbH,MAAMO;;;QAGNL,QAAQ;QACRC,aAAa"}