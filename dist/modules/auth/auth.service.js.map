{"version":3,"sources":["../../../src/modules/auth/auth.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  UnauthorizedException,\r\n  ConflictException,\r\n} from '@nestjs/common'\r\nimport { PrismaService } from '../../prisma.service'\r\nimport { SignupDto } from './dto/signup.dto'\r\nimport { LoginDto } from './dto/login.dto'\r\nimport * as bcrypt from 'bcryptjs'\r\nimport { JwtService } from '@nestjs/jwt'\r\nimport { Request } from 'express'\r\nimport { logAuthFailure } from '../../common/logger'\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private prisma: PrismaService,\r\n    private jwtService: JwtService,\r\n  ) {}\r\n\r\n  async signup(dto: SignupDto, req: Request) {\r\n    const email = dto.email.toLowerCase()\r\n    const existing = await this.prisma.user.findUnique({\r\n      where: { email },\r\n    })\r\n    if (existing) {\r\n      logAuthFailure({\r\n        code: 'USER_ALREADY_EXISTS',\r\n        message: 'Email already in use',\r\n        ip: req.ip ?? 'unknown',\r\n        requestId: String(req.headers['x-request-id'] ?? ''), \r\n      })\r\n      throw new ConflictException({\r\n        code: 'USER_ALREADY_EXISTS',\r\n        message: 'Email already in use',\r\n      })\r\n    }\r\n\r\n    const hash = await bcrypt.hash(dto.password, 10)\r\n    const user = await this.prisma.user.create({\r\n      data: {\r\n        name: dto.name,\r\n        email,\r\n        password: hash,\r\n        role: dto.role ?? 'SALES',\r\n      },\r\n    })\r\n\r\n    return {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n      role: user.role,\r\n      createdAt: user.createdAt,\r\n    }\r\n  }\r\n\r\n  async login(dto: LoginDto, req: Request) {\r\n    const email = dto.email.toLowerCase()\r\n    const user = await this.prisma.user.findUnique({\r\n      where: { email },\r\n    })\r\n\r\n    if (!user) {\r\n      logAuthFailure({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials',\r\n        ip: req.ip ?? 'unknown',\r\n        requestId: String(req.headers['x-request-id'] ?? ''),\r\n      })\r\n      throw new UnauthorizedException({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials',\r\n      })\r\n    }\r\n\r\n    const valid = await bcrypt.compare(dto.password, user.password)\r\n    if (!valid) {\r\n      logAuthFailure({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials',\r\n        ip: req.ip ?? 'unknown',\r\n        userId: String(user.id),\r\n        requestId: String(req.headers['x-request-id'] ?? ''),\r\n      })\r\n      throw new UnauthorizedException({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials',\r\n      })\r\n    }\r\n\r\n    const token = await this.jwtService.signAsync({\r\n      sub: user.id,\r\n      email: user.email,\r\n      role: user.role,\r\n      name: user.name,\r\n    })\r\n\r\n    return {\r\n      accessToken: token,\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        role: user.role,\r\n      },\r\n    }\r\n  }\r\n\r\n  async checkEmailExists(email: string): Promise<boolean> {\r\n    if (!email) return false\r\n    const user = await this.prisma.user.findUnique({\r\n      where: { email: email.toLowerCase() },\r\n      select: { id: true },\r\n    })\r\n    return !!user\r\n  }\r\n\r\n  async mobileLogin(dto: LoginDto, req: Request) {\r\n    const email = dto.email.toLowerCase();\r\n    const user = await this.prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    if (!user) {\r\n      logAuthFailure({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials for mobile login',\r\n        ip: req.ip ?? 'unknown',\r\n        requestId: String(req.headers['x-request-id'] ?? ''),\r\n      });\r\n      throw new UnauthorizedException({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials',\r\n      });\r\n    }\r\n\r\n    // This is the key change: check the user's role\r\n    if (user.role !== 'USER') {\r\n      logAuthFailure({\r\n        code: 'INVALID_ROLE_FOR_MOBILE',\r\n        message: `User with role ${user.role} attempted mobile login`,\r\n        ip: req.ip ?? 'unknown',\r\n        userId: String(user.id),\r\n        requestId: String(req.headers['x-request-id'] ?? ''),\r\n      });\r\n      throw new UnauthorizedException({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials',\r\n      });\r\n    }\r\n\r\n    const valid = await bcrypt.compare(dto.password, user.password);\r\n    if (!valid) {\r\n      logAuthFailure({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials for mobile login',\r\n        ip: req.ip ?? 'unknown',\r\n        userId: String(user.id),\r\n        requestId: String(req.headers['x-request-id'] ?? ''),\r\n      });\r\n      throw new UnauthorizedException({\r\n        code: 'INVALID_CREDENTIALS',\r\n        message: 'Invalid credentials',\r\n      });\r\n    }\r\n\r\n    const token = await this.jwtService.signAsync({\r\n      sub: user.id,\r\n      email: user.email,\r\n      role: user.role,\r\n      name: user.name,\r\n    });\r\n\r\n    return {\r\n      accessToken: token,\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        role: user.role,\r\n      },\r\n    };\r\n  }\r\n}\r\n"],"names":["AuthService","signup","dto","req","email","toLowerCase","existing","prisma","user","findUnique","where","logAuthFailure","code","message","ip","requestId","String","headers","ConflictException","hash","bcrypt","password","create","data","name","role","id","createdAt","login","UnauthorizedException","valid","compare","userId","token","jwtService","signAsync","sub","accessToken","checkEmailExists","select","mobileLogin"],"mappings":"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"}