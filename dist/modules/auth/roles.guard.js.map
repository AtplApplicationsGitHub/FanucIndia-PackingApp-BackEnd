{"version":3,"sources":["../../../src/modules/auth/roles.guard.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  CanActivate,\r\n  ExecutionContext,\r\n  ForbiddenException,\r\n} from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { ROLES_KEY, UserRole } from './roles.decorator';\r\n\r\n@Injectable()\r\nexport class RolesGuard implements CanActivate {\r\n  constructor(private reflector: Reflector) {}\r\n\r\n  canActivate(context: ExecutionContext): boolean {\r\n    const requiredRoles = this.reflector.getAllAndOverride<UserRole[]>(\r\n      ROLES_KEY,\r\n      [context.getHandler(), context.getClass()],\r\n    );\r\n\r\n    if (!requiredRoles || requiredRoles.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    const { user } = context.switchToHttp().getRequest();\r\n\r\n    if (!user) {\r\n      throw new ForbiddenException('User is not authenticated');\r\n    }\r\n\r\n    if (!requiredRoles.includes(user.role)) {\r\n      throw new ForbiddenException(\r\n        `User role '${user.role}' is not allowed to access this resource`,\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"names":["RolesGuard","canActivate","context","requiredRoles","reflector","getAllAndOverride","ROLES_KEY","getHandler","getClass","length","user","switchToHttp","getRequest","ForbiddenException","includes","role"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBALN;sBACmB;gCACU;;;;;;;;;;AAG7B,IAAA,AAAMA,aAAN,MAAMA;IAGXC,YAAYC,OAAyB,EAAW;QAC9C,MAAMC,gBAAgB,IAAI,CAACC,SAAS,CAACC,iBAAiB,CACpDC,yBAAS,EACT;YAACJ,QAAQK,UAAU;YAAIL,QAAQM,QAAQ;SAAG;QAG5C,IAAI,CAACL,iBAAiBA,cAAcM,MAAM,KAAK,GAAG;YAChD,OAAO;QACT;QAEA,MAAM,EAAEC,IAAI,EAAE,GAAGR,QAAQS,YAAY,GAAGC,UAAU;QAElD,IAAI,CAACF,MAAM;YACT,MAAM,IAAIG,0BAAkB,CAAC;QAC/B;QAEA,IAAI,CAACV,cAAcW,QAAQ,CAACJ,KAAKK,IAAI,GAAG;YACtC,MAAM,IAAIF,0BAAkB,CAC1B,CAAC,WAAW,EAAEH,KAAKK,IAAI,CAAC,wCAAwC,CAAC;QAErE;QAEA,OAAO;IACT;IAzBA,YAAY,AAAQX,SAAoB,CAAE;aAAtBA,YAAAA;IAAuB;AA0B7C"}