{"version":3,"sources":["../../../src/modules/dispatch/dispatch.service.ts"],"sourcesContent":["import {\r\n  BadRequestException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport { CreateDispatchDto } from './dto/create-dispatch.dto';\r\nimport { UpdateDispatchDto } from './dto/update-dispatch.dto';\r\nimport { SftpService } from '../sftp/sftp.service';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { Prisma } from '@prisma/client';\r\nimport PDFDocument from 'pdfkit';\r\n\r\ninterface AttachmentData {\r\n  fileName: string;\r\n  path: string;\r\n  mimeType: string;\r\n  size: number;\r\n}\r\n\r\n@Injectable()\r\nexport class DispatchService {\r\n  constructor(\r\n    private readonly prisma: PrismaService,\r\n    private readonly sftpService: SftpService,\r\n  ) {}\r\n\r\n  async create(\r\n    dto: CreateDispatchDto,\r\n    files: Express.Multer.File[],\r\n    userId: number,\r\n  ) {\r\n    const { customerId, address, transporterId, vehicleNumber, saleOrderNumbers } = dto;\r\n\r\n    return this.prisma.$transaction(async (tx) => {\r\n      const uploadedAttachments: AttachmentData[] = [];\r\n      if (files && files.length > 0) {\r\n        const remoteDir = path.posix.join(\r\n          process.env.SFTP_BASE_DIR || '/fanuc/dispatch-attachments',\r\n          `${Date.now()}`,\r\n        );\r\n        await this.sftpService.ensureDir(remoteDir);\r\n\r\n        for (const file of files) {\r\n          const remotePath = path.posix.join(remoteDir, file.filename);\r\n          await this.sftpService.put(file.path, remotePath);\r\n          uploadedAttachments.push({\r\n            fileName: file.originalname,\r\n            path: remotePath,\r\n            mimeType: file.mimetype,\r\n            size: file.size,\r\n          });\r\n          fs.unlinkSync(file.path);\r\n        }\r\n      }\r\n\r\n      const newDispatch = await tx.dispatch.create({\r\n        data: {\r\n          customerId: Number(customerId),\r\n          address,\r\n          transporterId: transporterId ? Number(transporterId) : null,\r\n          vehicleNumber,\r\n          createdBy: userId,\r\n          attachments:\r\n            uploadedAttachments.length > 0\r\n              ? (uploadedAttachments as unknown as Prisma.JsonArray)\r\n              : Prisma.JsonNull,\r\n        },\r\n      });\r\n\r\n      if (saleOrderNumbers && saleOrderNumbers.length > 0) {\r\n        // Validate SOs\r\n        for (const so of saleOrderNumbers) {\r\n          const salesOrder = await tx.salesOrder.findUnique({ where: { saleOrderNumber: so } });\r\n          if (!salesOrder) throw new BadRequestException(`Sale Order ${so} not found.`);\r\n          if (salesOrder.customerId !== Number(customerId)) throw new BadRequestException(`Sale Order ${so} belongs to a different customer.`);\r\n        }\r\n\r\n        // Link SOs to the new dispatch\r\n        await tx.dispatch_SO.createMany({\r\n          data: saleOrderNumbers.map(so => ({\r\n            dispatchId: newDispatch.id,\r\n            saleOrderNumber: so,\r\n          })),\r\n        });\r\n\r\n        // Update status of only the specified SOs\r\n        await tx.salesOrder.updateMany({\r\n          where: {\r\n            saleOrderNumber: { in: saleOrderNumbers },\r\n          },\r\n          data: {\r\n            status: 'Dispatched',\r\n          },\r\n        });\r\n      }\r\n\r\n      return newDispatch;\r\n    });\r\n  }\r\n\r\n  async findAll() {\r\n    const dispatches = await this.prisma.dispatch.findMany({\r\n      orderBy: { createdAt: 'desc' },\r\n      include: {\r\n        customer: { select: { name: true } },\r\n        transporter: { select: { name: true } },\r\n        _count: {\r\n          select: { dispatchSOs: true },\r\n        },\r\n      },\r\n    });\r\n\r\n    return dispatches.map((d) => ({\r\n      ...d,\r\n      soCount: d._count.dispatchSOs,\r\n    }));\r\n  }\r\n\r\n  async update(id: number, dto: UpdateDispatchDto) {\r\n    const { customerId, transporterId, vehicleNumber } = dto;\r\n    return this.prisma.dispatch.update({\r\n      where: { id },\r\n      data: {\r\n        customerId: customerId ? Number(customerId) : undefined,\r\n        transporterId: transporterId ? Number(transporterId) : undefined,\r\n        vehicleNumber,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findDispatchSOs(dispatchId: number) {\r\n    return this.prisma.dispatch_SO.findMany({\r\n      where: { dispatchId },\r\n      orderBy: { createdAt: 'asc' },\r\n    });\r\n  }\r\n\r\n  async addDispatchSO(dispatchId: number, saleOrderNumber: string) {\r\n    const dispatch = await this.prisma.dispatch.findUnique({\r\n      where: { id: dispatchId },\r\n      select: { customerId: true },\r\n    });\r\n\r\n    if (!dispatch) {\r\n      throw new NotFoundException('Dispatch record not found.');\r\n    }\r\n\r\n    const salesOrder = await this.prisma.salesOrder.findUnique({\r\n      where: { saleOrderNumber },\r\n      select: { customerId: true },\r\n    });\r\n\r\n    if (!salesOrder) {\r\n      throw new NotFoundException('Invalid SO Number');\r\n    }\r\n\r\n    // if (salesOrder.customerId !== dispatch.customerId) {\r\n    //   throw new BadRequestException(\r\n    //     'This SO Number belongs to a different customer.',\r\n    //   );\r\n    // }\r\n\r\n    // Status update logic is now in the create method, so this becomes simpler.\r\n    try {\r\n      return await this.prisma.dispatch_SO.create({\r\n        data: {\r\n          dispatchId,\r\n          saleOrderNumber,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      if (\r\n        error instanceof Prisma.PrismaClientKnownRequestError &&\r\n        error.code === 'P2002'\r\n      ) {\r\n        throw new BadRequestException('SO Number already added.');\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async removeDispatchSO(soId: number) {\r\n    await this.prisma.dispatch_SO.delete({ where: { id: soId } });\r\n    return { message: 'SO Number removed' };\r\n  }\r\n\r\n  async generatePdf(dispatchId: number): Promise<Buffer> {\r\n    const dispatch = await this.prisma.dispatch.findUnique({\r\n      where: { id: dispatchId },\r\n      include: {\r\n        customer: true,\r\n        dispatchSOs: {\r\n          select: {\r\n            saleOrderNumber: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!dispatch) {\r\n      throw new NotFoundException('Dispatch not found');\r\n    }\r\n\r\n    const doc = new PDFDocument({ margin: 50 });\r\n    const buffers: Buffer[] = [];\r\n    doc.on('data', buffers.push.bind(buffers));\r\n\r\n    doc.fontSize(20).text('Dispatch Note', { align: 'center' });\r\n    doc.moveDown();\r\n\r\n    doc.fontSize(12).text(`Customer Name: ${dispatch.customer.name}`);\r\n    doc.text(`Address: ${dispatch.customer.address}`);\r\n    doc.moveDown();\r\n\r\n    const tableTop = doc.y;\r\n    const tableHeaders = ['S.No', 'Sale Order Number'];\r\n\r\n    doc.font('Helvetica-Bold');\r\n    tableHeaders.forEach((header, i) => {\r\n      doc.text(header, 50 + i * 250, tableTop);\r\n    });\r\n    doc.font('Helvetica');\r\n\r\n    dispatch.dispatchSOs.forEach((so, index) => {\r\n      const y = tableTop + 25 + index * 25;\r\n      doc.text(String(index + 1), 50, y);\r\n      doc.text(so.saleOrderNumber, 300, y);\r\n    });\r\n\r\n    return new Promise((resolve) => {\r\n      doc.on('end', () => {\r\n        resolve(Buffer.concat(buffers));\r\n      });\r\n      doc.end();\r\n    });\r\n  }\r\n\r\n  async addAttachments(dispatchId: number, files: Express.Multer.File[]) {\r\n    const dispatch = await this.prisma.dispatch.findUnique({\r\n      where: { id: dispatchId },\r\n    });\r\n    if (!dispatch) {\r\n      throw new NotFoundException('Dispatch not found');\r\n    }\r\n\r\n    const existingAttachments =\r\n      (dispatch.attachments as AttachmentData[] | null) || [];\r\n    const newAttachments: AttachmentData[] = [];\r\n\r\n    const remoteDir = path.posix.join(\r\n      process.env.SFTP_BASE_DIR || '/fanuc/dispatch-attachments',\r\n      `${dispatch.id}_${Date.now()}`,\r\n    );\r\n    await this.sftpService.ensureDir(remoteDir);\r\n\r\n    for (const file of files) {\r\n      const remotePath = path.posix.join(remoteDir, file.filename);\r\n      await this.sftpService.put(file.path, remotePath);\r\n      newAttachments.push({\r\n        fileName: file.originalname,\r\n        path: remotePath,\r\n        mimeType: file.mimetype,\r\n        size: file.size,\r\n      });\r\n      fs.unlinkSync(file.path);\r\n    }\r\n\r\n    const allAttachments = [...existingAttachments, ...newAttachments];\r\n\r\n    return this.prisma.dispatch.update({\r\n      where: { id: dispatchId },\r\n      data: { attachments: allAttachments as unknown as Prisma.JsonArray },\r\n    });\r\n  }\r\n\r\n  async deleteAttachment(dispatchId: number, fileName: string) {\r\n    const dispatch = await this.prisma.dispatch.findUnique({\r\n      where: { id: dispatchId },\r\n    });\r\n    if (!dispatch) {\r\n      throw new NotFoundException('Dispatch not found');\r\n    }\r\n\r\n    const attachments = (dispatch.attachments as AttachmentData[] | null) || [];\r\n    const attachmentToDelete = attachments.find(\r\n      (att) => att.fileName === fileName,\r\n    );\r\n\r\n    if (!attachmentToDelete) {\r\n      throw new NotFoundException('Attachment not found');\r\n    }\r\n\r\n    try {\r\n      await this.sftpService.delete(attachmentToDelete.path);\r\n    } catch (error) {\r\n      console.error(\r\n        `SFTP delete failed for ${attachmentToDelete.path}, but proceeding with DB update.`,\r\n      );\r\n    }\r\n\r\n    const updatedAttachments = attachments.filter(\r\n      (att) => att.fileName !== fileName,\r\n    );\r\n\r\n    return this.prisma.dispatch.update({\r\n      where: { id: dispatchId },\r\n      data: { attachments: updatedAttachments as unknown as Prisma.JsonArray },\r\n    });\r\n  }\r\n\r\n  async getAttachmentStream(dispatchId: number, fileName: string) {\r\n    const dispatch = await this.prisma.dispatch.findUnique({ where: { id: dispatchId } });\r\n    if (!dispatch) {\r\n      throw new NotFoundException('Dispatch not found');\r\n    }\r\n\r\n    const attachments = (dispatch.attachments as AttachmentData[] | null) || [];\r\n    const attachment = attachments.find(att => att.fileName === fileName);\r\n\r\n    if (!attachment) {\r\n      throw new NotFoundException('Attachment not found');\r\n    }\r\n\r\n    try {\r\n      const streamOrBuffer = await this.sftpService.getStream(attachment.path);\r\n\r\n      let stream;\r\n      if (Buffer.isBuffer(streamOrBuffer)) {\r\n        const { Readable } = require('stream');\r\n        stream = Readable.from(streamOrBuffer);\r\n      } else {\r\n        stream = streamOrBuffer;\r\n      }\r\n\r\n      return { stream, mimeType: attachment.mimeType };\r\n    } catch (error) {\r\n        console.error(\"SFTP stream error:\", error)\r\n        throw new NotFoundException('File not found on storage server.');\r\n    }\r\n  }\r\n}"],"names":["DispatchService","create","dto","files","userId","customerId","address","transporterId","vehicleNumber","saleOrderNumbers","prisma","$transaction","tx","uploadedAttachments","length","remoteDir","path","posix","join","process","env","SFTP_BASE_DIR","Date","now","sftpService","ensureDir","file","remotePath","filename","put","push","fileName","originalname","mimeType","mimetype","size","fs","unlinkSync","newDispatch","dispatch","data","Number","createdBy","attachments","Prisma","JsonNull","so","salesOrder","findUnique","where","saleOrderNumber","BadRequestException","dispatch_SO","createMany","map","dispatchId","id","updateMany","in","status","findAll","dispatches","findMany","orderBy","createdAt","include","customer","select","name","transporter","_count","dispatchSOs","d","soCount","update","undefined","findDispatchSOs","addDispatchSO","NotFoundException","error","PrismaClientKnownRequestError","code","removeDispatchSO","soId","delete","message","generatePdf","doc","PDFDocument","margin","buffers","on","bind","fontSize","text","align","moveDown","tableTop","y","tableHeaders","font","forEach","header","i","index","String","Promise","resolve","Buffer","concat","end","addAttachments","existingAttachments","newAttachments","allAttachments","deleteAttachment","attachmentToDelete","find","att","console","updatedAttachments","filter","getAttachmentStream","attachment","streamOrBuffer","getStream","stream","isBuffer","Readable","require","from"],"mappings":"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"}