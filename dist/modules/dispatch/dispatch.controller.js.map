{"version":3,"sources":["../../../src/modules/dispatch/dispatch.controller.ts"],"sourcesContent":["import {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Body,\r\n  Patch,\r\n  Param,\r\n  Delete,\r\n  UseGuards,\r\n  ParseIntPipe,\r\n  UseInterceptors,\r\n  UploadedFiles,\r\n  Req,\r\n  Res,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { FilesInterceptor } from '@nestjs/platform-express';\r\nimport { diskStorage } from 'multer';\r\nimport { extname } from 'path';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { AuthRequest } from '../auth/types/auth-request.type';\r\nimport { DispatchService } from './dispatch.service';\r\nimport { CreateDispatchDto } from './dto/create-dispatch.dto';\r\nimport { UpdateDispatchDto } from './dto/update-dispatch.dto';\r\nimport { Response } from 'express';\r\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\r\n\r\n@ApiTags('Dispatch')\r\n@ApiBearerAuth()\r\n@UseGuards(JwtAuthGuard)\r\n@Controller('dispatch')\r\nexport class DispatchController {\r\n  constructor(private readonly dispatchService: DispatchService) {}\r\n\r\n  @Post()\r\n  @Roles('ADMIN', 'USER')\r\n  @UseInterceptors(\r\n    FilesInterceptor('attachments', 10, {\r\n      storage: diskStorage({\r\n        destination: './temp_uploads',\r\n        filename: (req, file, cb) => {\r\n          const randomName = Array(32)\r\n            .fill(null)\r\n            .map(() => Math.round(Math.random() * 16).toString(16))\r\n            .join('');\r\n          cb(null, `${randomName}${extname(file.originalname)}`);\r\n        },\r\n      }),\r\n    }),\r\n  )\r\n  create(\r\n    @Body() createDispatchDto: CreateDispatchDto,\r\n    @UploadedFiles() files: Express.Multer.File[],\r\n    @Req() req: AuthRequest,\r\n  ) {\r\n    return this.dispatchService.create(\r\n      createDispatchDto,\r\n      files,\r\n      req.user.userId,\r\n    );\r\n  }\r\n\r\n  @Get()\r\n  @Roles('ADMIN', 'USER')\r\n  findAll() {\r\n    return this.dispatchService.findAll();\r\n  }\r\n\r\n  @Patch(':id')\r\n  @Roles('ADMIN', 'USER')\r\n  update(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Body() updateDispatchDto: UpdateDispatchDto,\r\n  ) {\r\n    return this.dispatchService.update(id, updateDispatchDto);\r\n  }\r\n\r\n  @Get(':id/so')\r\n  @Roles('ADMIN', 'USER')\r\n  findDispatchSOs(@Param('id', ParseIntPipe) id: number) {\r\n    return this.dispatchService.findDispatchSOs(id);\r\n  }\r\n\r\n  @Post(':id/so')\r\n  @Roles('ADMIN', 'USER')\r\n  addDispatchSO(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Body('saleOrderNumber') saleOrderNumber: string,\r\n  ) {\r\n    return this.dispatchService.addDispatchSO(id, saleOrderNumber);\r\n  }\r\n\r\n  @Delete('so/:soId')\r\n  @Roles('ADMIN', 'USER')\r\n  removeDispatchSO(@Param('soId', ParseIntPipe) soId: number) {\r\n    return this.dispatchService.removeDispatchSO(soId);\r\n  }\r\n\r\n  @Get(':id/pdf')\r\n  @Roles('ADMIN', 'USER')\r\n  async generatePdf(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Res() res: Response,\r\n  ) {\r\n    const pdfBuffer = await this.dispatchService.generatePdf(id);\r\n    res.set({\r\n      'Content-Type': 'application/pdf',\r\n      'Content-Disposition': `attachment; filename=dispatch_${id}.pdf`,\r\n      'Content-Length': pdfBuffer.length,\r\n    });\r\n    res.send(pdfBuffer);\r\n  }\r\n\r\n  @Post(':id/attachments')\r\n  @Roles('ADMIN', 'USER')\r\n  @UseInterceptors(\r\n    FilesInterceptor('attachments', 10, {\r\n      storage: diskStorage({\r\n        destination: './temp_uploads',\r\n        filename: (req, file, cb) => {\r\n          const randomName = Array(32)\r\n            .fill(null)\r\n            .map(() => Math.round(Math.random() * 16).toString(16))\r\n            .join('');\r\n          cb(null, `${randomName}${extname(file.originalname)}`);\r\n        },\r\n      }),\r\n    }),\r\n  )\r\n  addAttachments(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @UploadedFiles() files: Express.Multer.File[],\r\n  ) {\r\n    return this.dispatchService.addAttachments(id, files);\r\n  }\r\n\r\n  @Delete(':id/attachments')\r\n  @Roles('ADMIN', 'USER')\r\n  deleteAttachment(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Body('fileName') fileName: string,\r\n  ) {\r\n    if (!fileName) {\r\n      throw new BadRequestException('fileName is required');\r\n    }\r\n    return this.dispatchService.deleteAttachment(id, fileName);\r\n  }\r\n\r\n  @Get(':id/attachments/:fileName')\r\n  @Roles('ADMIN', 'USER', 'SALES')\r\n  async downloadDispatchAttachment(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Param('fileName') fileName: string,\r\n    @Res() res: Response,\r\n  ) {\r\n    const { stream, mimeType } = await this.dispatchService.getAttachmentStream(id, fileName);\r\n    res.setHeader('Content-Disposition', `inline; filename=\"${fileName}\"`);\r\n    res.setHeader('Content-Type', mimeType || 'application/octet-stream');\r\n    stream.pipe(res);\r\n  }\r\n}\r\n"],"names":["DispatchController","create","createDispatchDto","files","req","dispatchService","user","userId","findAll","update","id","updateDispatchDto","findDispatchSOs","addDispatchSO","saleOrderNumber","removeDispatchSO","soId","generatePdf","res","pdfBuffer","set","length","send","addAttachments","deleteAttachment","fileName","BadRequestException","downloadDispatchAttachment","stream","mimeType","getAttachmentStream","setHeader","pipe","storage","diskStorage","destination","filename","file","cb","randomName","Array","fill","map","Math","round","random","toString","join","extname","originalname"],"mappings":"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"}