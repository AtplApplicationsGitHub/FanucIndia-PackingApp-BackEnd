{"version":3,"sources":["../../../src/modules/user-dashboard/user-dashboard.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport { Prisma } from '@prisma/client';\r\n\r\n@Injectable()\r\nexport class UserDashboardService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  async findAssignedOrders(userId: number) {\r\n    const assignedOrders = await this.prisma.salesOrder.findMany({\r\n      where: {\r\n        assignedUserId: userId,\r\n      },\r\n      include: {\r\n        product: {\r\n          select: {\r\n            name: true,\r\n          },\r\n        },\r\n        packConfig: {\r\n          select: {\r\n            configName: true,\r\n          },\r\n        },\r\n        materialData: {\r\n          select: {\r\n            Required_Qty: true,\r\n            Issue_stage: true,\r\n            Packing_stage: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        createdAt: 'desc',\r\n      },\r\n    });\r\n\r\n    const incompleteOrders = assignedOrders.filter(order => {\r\n      if (order.materialData.length === 0) {\r\n        return true;\r\n      }\r\n\r\n      const isComplete = order.materialData.every(\r\n        material =>\r\n          material.Required_Qty > 0 &&\r\n          material.Required_Qty === material.Issue_stage &&\r\n          material.Issue_stage === material.Packing_stage\r\n      );\r\n\r\n      return !isComplete;\r\n    });\r\n    \r\n    return incompleteOrders.map(({ materialData, ...order }) => order);\r\n  }\r\n\r\n  async findOrderById(orderId: number, userId: number, userRole: string) {\r\n    const whereClause: Prisma.SalesOrderWhereUniqueInput = { id: orderId };\r\n\r\n    if (userRole !== 'ADMIN') {\r\n      whereClause.assignedUserId = userId;\r\n    }\r\n\r\n    return this.prisma.salesOrder.findFirst({\r\n      where: whereClause,\r\n      include: {\r\n        customer: true,\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"names":["UserDashboardService","findAssignedOrders","userId","assignedOrders","prisma","salesOrder","findMany","where","assignedUserId","include","product","select","name","packConfig","configName","materialData","Required_Qty","Issue_stage","Packing_stage","orderBy","createdAt","incompleteOrders","filter","order","length","isComplete","every","material","map","findOrderById","orderId","userRole","whereClause","id","findFirst","customer"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBALc;+BACG;;;;;;;;;;AAIvB,IAAA,AAAMA,uBAAN,MAAMA;IAGX,MAAMC,mBAAmBC,MAAc,EAAE;QACvC,MAAMC,iBAAiB,MAAM,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,QAAQ,CAAC;YAC3DC,OAAO;gBACLC,gBAAgBN;YAClB;YACAO,SAAS;gBACPC,SAAS;oBACPC,QAAQ;wBACNC,MAAM;oBACR;gBACF;gBACAC,YAAY;oBACVF,QAAQ;wBACNG,YAAY;oBACd;gBACF;gBACAC,cAAc;oBACZJ,QAAQ;wBACNK,cAAc;wBACdC,aAAa;wBACbC,eAAe;oBACjB;gBACF;YACF;YACAC,SAAS;gBACPC,WAAW;YACb;QACF;QAEA,MAAMC,mBAAmBlB,eAAemB,MAAM,CAACC,CAAAA;YAC7C,IAAIA,MAAMR,YAAY,CAACS,MAAM,KAAK,GAAG;gBACnC,OAAO;YACT;YAEA,MAAMC,aAAaF,MAAMR,YAAY,CAACW,KAAK,CACzCC,CAAAA,WACEA,SAASX,YAAY,GAAG,KACxBW,SAASX,YAAY,KAAKW,SAASV,WAAW,IAC9CU,SAASV,WAAW,KAAKU,SAAST,aAAa;YAGnD,OAAO,CAACO;QACV;QAEA,OAAOJ,iBAAiBO,GAAG,CAAC,CAAC,EAAEb,YAAY,EAAE,GAAGQ,OAAO,GAAKA;IAC9D;IAEA,MAAMM,cAAcC,OAAe,EAAE5B,MAAc,EAAE6B,QAAgB,EAAE;QACrE,MAAMC,cAAiD;YAAEC,IAAIH;QAAQ;QAErE,IAAIC,aAAa,SAAS;YACxBC,YAAYxB,cAAc,GAAGN;QAC/B;QAEA,OAAO,IAAI,CAACE,MAAM,CAACC,UAAU,CAAC6B,SAAS,CAAC;YACtC3B,OAAOyB;YACPvB,SAAS;gBACP0B,UAAU;YACZ;QACF;IACF;IA9DA,YAAY,AAAiB/B,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;AA+DvD"}