{"version":3,"sources":["../../../src/modules/user/user.controller.ts"],"sourcesContent":["import {\r\n  Controller,\r\n  Post,\r\n  Get,\r\n  Patch,\r\n  Delete,\r\n  Body,\r\n  Param,\r\n  ParseIntPipe,\r\n  Req,\r\n  ForbiddenException,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { UserService } from './user.service';\r\nimport { CreateUserDto, UpdateUserDto } from './dto/user.dto';\r\nimport {\r\n  ApiTags,\r\n  ApiOperation,\r\n  ApiResponse,\r\n  ApiBody,\r\n  ApiParam,\r\n  ApiQuery,\r\n} from '@nestjs/swagger';\r\nimport { AuthRequest } from '../auth/types/auth-request.type';\r\n\r\n@ApiTags('Users')\r\n@Controller('users')\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new user (Admin only)' })\r\n  @ApiBody({ type: CreateUserDto })\r\n  @ApiResponse({ status: 201, description: 'User created successfully' })\r\n  @ApiResponse({ status: 400, description: 'Validation failed' })\r\n  create(@Body() dto: CreateUserDto) {\r\n    return this.userService.create(dto);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\r\n  @ApiQuery({ name: 'role', required: false, type: String, description: 'Filter by user role' })\r\n  @ApiResponse({ status: 200, description: 'List of all users' })\r\n  findAll(@Query('role') role?: 'ADMIN' | 'SALES' | 'USER') {\r\n    return this.userService.findAll(role);\r\n  }\r\n\r\n  @Patch(':id')\r\n  @ApiOperation({ summary: 'Update user details by ID (Admin only)' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  @ApiBody({ type: UpdateUserDto })\r\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\r\n  @ApiResponse({ status: 404, description: 'User not found' })\r\n  update(@Param('id', ParseIntPipe) id: number, @Body() dto: UpdateUserDto) {\r\n    return this.userService.update(id, dto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Delete a user by ID (Admin only)' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\r\n  @ApiResponse({ status: 404, description: 'User not found' })\r\n  remove(@Param('id', ParseIntPipe) id: number, @Req() req: AuthRequest) {\r\n    const currentUserId = req.user.userId;\r\n    if (id === currentUserId) {\r\n      throw new ForbiddenException('You cannot delete your own admin account.');\r\n    }\r\n    return this.userService.remove(id);\r\n  }\r\n}"],"names":["UserController","create","dto","userService","findAll","role","update","id","remove","req","currentUserId","user","userId","ForbiddenException","summary","type","CreateUserDto","status","description","name","required","String","Number","UpdateUserDto"],"mappings":";;;;+BA2BaA;;;eAAAA;;;wBAfN;6BACqB;yBACiB;yBAQtC;iCACqB;;;;;;;;;;;;;;;AAIrB,IAAA,AAAMA,iBAAN,MAAMA;IAQXC,OAAO,AAAQC,GAAkB,EAAE;QACjC,OAAO,IAAI,CAACC,WAAW,CAACF,MAAM,CAACC;IACjC;IAMAE,QAAQ,AAAeC,IAAiC,EAAE;QACxD,OAAO,IAAI,CAACF,WAAW,CAACC,OAAO,CAACC;IAClC;IAQAC,OAAO,AAA2BC,EAAU,EAAE,AAAQL,GAAkB,EAAE;QACxE,OAAO,IAAI,CAACC,WAAW,CAACG,MAAM,CAACC,IAAIL;IACrC;IAOAM,OAAO,AAA2BD,EAAU,EAAE,AAAOE,GAAgB,EAAE;QACrE,MAAMC,gBAAgBD,IAAIE,IAAI,CAACC,MAAM;QACrC,IAAIL,OAAOG,eAAe;YACxB,MAAM,IAAIG,0BAAkB,CAAC;QAC/B;QACA,OAAO,IAAI,CAACV,WAAW,CAACK,MAAM,CAACD;IACjC;IAxCA,YAAY,AAAiBJ,WAAwB,CAAE;aAA1BA,cAAAA;IAA2B;AAyC1D;;;;QAtCkBW,SAAS;;;QACdC,MAAMC,sBAAa;;;QACfC,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;QAMzBJ,SAAS;;;QACbK,MAAM;QAAQC,UAAU;QAAOL,MAAMM;QAAQH,aAAa;;;QACvDD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;QAMzBJ,SAAS;;;QACbK,MAAM;QAAMJ,MAAMO;;;QACnBP,MAAMQ,sBAAa;;;QACfN,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa;;;;;;;;;;;;;;QAMzBJ,SAAS;;;QACbK,MAAM;QAAMJ,MAAMO;;;QACfL,QAAQ;QAAKC,aAAa;;;QAC1BD,QAAQ;QAAKC,aAAa"}