{"version":3,"sources":["../../../src/modules/user/user.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport { CreateUserDto, UpdateUserDto } from './dto/user.dto';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { Prisma } from '@prisma/client';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  async create(dto: CreateUserDto) {\r\n    const existing = await this.prisma.user.findUnique({\r\n      where: { email: dto.email },\r\n    });\r\n    if (existing) throw new BadRequestException('Email already registered');\r\n    const hashedPassword = await bcrypt.hash(dto.password, 10);\r\n\r\n    return this.prisma.user.create({\r\n      data: {\r\n        name: dto.name,\r\n        email: dto.email,\r\n        password: hashedPassword,\r\n        role: dto.role,\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findAll(role?: 'ADMIN' | 'SALES' | 'USER') {\r\n    const where: Prisma.UserWhereInput = {};\r\n    if (role) {\r\n      where.role = role;\r\n    }\r\n\r\n    return this.prisma.user.findMany({\r\n      where,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n    });\r\n  }\r\n\r\n  async update(id: number, dto: UpdateUserDto) {\r\n    const user = await this.prisma.user.findUnique({ where: { id } });\r\n    if (!user) throw new NotFoundException('User not found');\r\n\r\n    const updateData: any = { ...dto };\r\n    if (dto.password) {\r\n      updateData.password = await bcrypt.hash(dto.password, 10);\r\n    } else {\r\n      delete updateData.password;\r\n    }\r\n\r\n    return this.prisma.user.update({\r\n      where: { id },\r\n      data: updateData,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async remove(id: number) {\r\n    const user = await this.prisma.user.findUnique({ where: { id } });\r\n    if (!user) throw new NotFoundException('User not found');\r\n\r\n    if (user.role === 'ADMIN') {\r\n      const adminCount = await this.prisma.user.count({\r\n        where: { role: 'ADMIN' },\r\n      });\r\n      if (adminCount <= 1) {\r\n        throw new BadRequestException(\r\n          'At least one admin must remain in the system.',\r\n        );\r\n      }\r\n    }\r\n\r\n    const salesOrderCount = await this.prisma.salesOrder.count({\r\n      where: { userId: id },\r\n    });\r\n    if (salesOrderCount > 0) {\r\n      throw new BadRequestException(\r\n        'Cannot delete user: this user has existing sales orders.',\r\n      );\r\n    }\r\n\r\n    await this.prisma.user.delete({ where: { id } });\r\n    return { message: 'User deleted successfully' };\r\n  }\r\n}"],"names":["UserService","create","dto","existing","prisma","user","findUnique","where","email","BadRequestException","hashedPassword","bcrypt","hash","password","data","name","role","select","id","createdAt","updatedAt","findAll","findMany","orderBy","update","NotFoundException","updateData","remove","adminCount","count","salesOrderCount","salesOrder","userId","delete","message"],"mappings":"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"}