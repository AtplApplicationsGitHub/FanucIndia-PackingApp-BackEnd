{"version":3,"sources":["../../../src/modules/erp-material-importer/erp-material-importer.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException, InternalServerErrorException } from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport * as xlsx from 'xlsx';\r\nimport { Prisma } from '@prisma/client';\r\n\r\nconst columnMapping = {\r\n  \"SO Number\": \"saleOrderNumber\",\r\n  \"Customer ID\": \"customerId\",\r\n  \"Transfer Order\": \"transferOrder\",\r\n  \"FG OBD\": \"FG_OBD\",\r\n  \"Machine Model\": \"Machine_Model\",\r\n  \"CNC Serial No\": \"CNC_Serial_No\",\r\n  \"Material Code\": \"Material_Code\",\r\n  \"Material Description\": \"Material_Description\",\r\n  \"Batch No\": \"Batch_No\",\r\n  \"SO Donor Batch\": \"SO_Donor_Batch\",\r\n  \"Certificate No\": \"Cert_No\",\r\n  \"Bin No\": \"Bin_No\",\r\n  \"A D F\": \"A_D_F\",\r\n  \"Required Qty\": \"Required_Qty\",\r\n  \"Issue Stage\": \"Issue_stage\",\r\n  \"Packing Stage\": \"Packing_stage\",\r\n  \"Status\": \"Status\",\r\n};\r\n\r\n@Injectable()\r\nexport class ErpMaterialImporterService {\r\n  private readonly logger = new Logger(ErpMaterialImporterService.name);\r\n\r\n  constructor(private prisma: PrismaService) {}\r\n\r\n  async processFile(file: Express.Multer.File, expectedSaleOrderNumber?: string) {\r\n    this.logger.log(`Starting to process file: ${file.originalname}`);\r\n    const records = this.readFile(file);\r\n    const validationError = await this.validateRecords(records, expectedSaleOrderNumber);\r\n    if (validationError) {\r\n      this.logger.error(`Validation failed for ${file.originalname}: ${validationError}`);\r\n      throw new BadRequestException(validationError);\r\n    }\r\n\r\n    const renamedRecords = this.renameColumns(records);\r\n    await this.upsertRecords(renamedRecords);\r\n\r\n    this.logger.log(`Successfully processed file: ${file.originalname}`);\r\n    return { message: `File processed successfully. ${renamedRecords.length} records upserted.` };\r\n  }\r\n\r\n  private readFile(file: Express.Multer.File): any[] {\r\n    try {\r\n      const workbook = xlsx.read(file.buffer, { type: 'buffer' });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      return xlsx.utils.sheet_to_json(worksheet, { defval: null });\r\n    } catch (error) {\r\n      this.logger.error('Failed to read or parse the Excel file.', error);\r\n      throw new BadRequestException('Invalid or corrupted file. Please upload a valid .xlsx or .csv file.');\r\n    }\r\n  }\r\n\r\n  private async validateRecords(records: any[], expectedSaleOrderNumber?: string): Promise<string | null> {\r\n    if (records.length === 0) {\r\n      return 'File is empty.';\r\n    }\r\n\r\n    const expectedHeaders = Object.keys(columnMapping);\r\n    const actualHeaders = Object.keys(records[0]);\r\n\r\n    const missingHeaders = expectedHeaders.filter(h => !actualHeaders.includes(h));\r\n    if (missingHeaders.length > 0) {\r\n        return `Header mismatch. Missing columns: ${missingHeaders.join(', ')}`;\r\n    }\r\n\r\n    const materialCodes = new Set<string>();\r\n    for (const record of records) {\r\n        const materialCode = record['Material Code'];\r\n        if (materialCode) {\r\n            if (materialCodes.has(materialCode)) {\r\n                return `Duplicate Material Code found in the file: ${materialCode}. Please ensure all material codes are unique.`;\r\n            }\r\n            materialCodes.add(materialCode);\r\n        } else {\r\n            return 'Missing Material Code in one or more rows.';\r\n        }\r\n    }\r\n\r\n    const soNumbers = new Set(records.map(r => r['SO Number']).filter(Boolean));\r\n    if (soNumbers.size > 1) {\r\n      return 'Inconsistent SO Numbers found in the file. All records must belong to the same SO Number.';\r\n    }\r\n    \r\n    const soNumberValue = soNumbers.values().next().value;\r\n    if (!soNumberValue) {\r\n      return 'Missing SO Number in one or more rows.';\r\n    }\r\n    const soNumber = String(soNumberValue);\r\n\r\n    if (expectedSaleOrderNumber && soNumber !== expectedSaleOrderNumber) {\r\n      return `The SO Number in the file ('${soNumber}') does not match the expected SO Number ('${expectedSaleOrderNumber}').`;\r\n    }\r\n\r\n    const orderExists = await this.prisma.salesOrder.findUnique({\r\n      where: { saleOrderNumber: soNumber },\r\n    });\r\n\r\n    if (!orderExists) {\r\n      return `Sales Order Number '${soNumber}' does not exist in the system.`;\r\n    }\r\n\r\n    return null;\r\n  }\r\n  \r\n  private renameColumns(records: any[]): any[] {\r\n    return records.map(record => {\r\n      const newRecord: { [key: string]: any } = {};\r\n      for (const key of Object.keys(columnMapping)) {\r\n          newRecord[columnMapping[key]] = record[key];\r\n      }\r\n      return newRecord;\r\n    });\r\n  }\r\n\r\n  private async upsertRecords(records: any[]) {\r\n    if (records.length === 0) return;\r\n    \r\n    const soNumber = String(records[0].saleOrderNumber); // Also ensure string here\r\n    this.logger.log(`Upserting ${records.length} records for SO Number: ${soNumber}`);\r\n\r\n    const safeParseInt = (val: any, defaultVal: number | null = null): number | null => {\r\n        if (val === null || val === undefined || String(val).trim() === '') return defaultVal;\r\n        const num = parseInt(String(val), 10);\r\n        return isNaN(num) ? defaultVal : num;\r\n    };\r\n    \r\n    const safeToString = (val: any, defaultVal: string | null = null): string | null => {\r\n        if (val === null || val === undefined) return defaultVal;\r\n        return String(val);\r\n    };\r\n\r\n    const recordsToCreate = records.map(r => ({\r\n      saleOrderNumber: safeToString(r.saleOrderNumber)!,\r\n      customerId: safeParseInt(r.customerId),\r\n      transferOrder: safeToString(r.transferOrder),\r\n      FG_OBD: safeToString(r.FG_OBD),\r\n      Machine_Model: safeToString(r.Machine_Model),\r\n      CNC_Serial_No: safeToString(r.CNC_Serial_No),\r\n      Material_Code: safeToString(r.Material_Code, '')!,\r\n      Material_Description: safeToString(r.Material_Description, '')!,\r\n      Batch_No: safeToString(r.Batch_No, '')!,\r\n      SO_Donor_Batch: safeToString(r.SO_Donor_Batch, '')!,\r\n      Cert_No: safeToString(r.Cert_No, '')!,\r\n      Bin_No: safeToString(r.Bin_No, '')!,\r\n      A_D_F: safeToString(r.A_D_F, '')!,\r\n      Required_Qty: safeParseInt(r.Required_Qty, 0)!,\r\n      Issue_stage: safeParseInt(r.Issue_stage, 0)!,\r\n      Packing_stage: safeParseInt(r.Packing_stage, 0)!,\r\n      Status: safeToString(r.Status),\r\n    }));\r\n\r\n    try {\r\n      await this.prisma.$transaction(async (tx) => {\r\n        this.logger.log(`Deleting existing records for SO: ${soNumber}`);\r\n        await tx.eRP_Material_Data.deleteMany({\r\n          where: { saleOrderNumber: soNumber },\r\n        });\r\n\r\n        this.logger.log(`Inserting new records for SO: ${soNumber}`);\r\n        await tx.eRP_Material_Data.createMany({\r\n          data: recordsToCreate,\r\n        });\r\n      });\r\n    } catch (e) {\r\n      this.logger.error(`Database transaction failed for SO: ${soNumber}`, e);\r\n      if (e instanceof Prisma.PrismaClientKnownRequestError) {\r\n         if (e.code === 'P2003') { \r\n            throw new BadRequestException('Invalid data in file. A record refers to a Customer ID that does not exist.');\r\n         }\r\n      }\r\n      throw new InternalServerErrorException('Database transaction failed.');\r\n    }\r\n  }\r\n}"],"names":["ErpMaterialImporterService","columnMapping","processFile","file","expectedSaleOrderNumber","logger","log","originalname","records","readFile","validationError","validateRecords","error","BadRequestException","renamedRecords","renameColumns","upsertRecords","message","length","workbook","xlsx","read","buffer","type","sheetName","SheetNames","worksheet","Sheets","utils","sheet_to_json","defval","expectedHeaders","Object","keys","actualHeaders","missingHeaders","filter","h","includes","join","materialCodes","Set","record","materialCode","has","add","soNumbers","map","r","Boolean","size","soNumberValue","values","next","value","soNumber","String","orderExists","prisma","salesOrder","findUnique","where","saleOrderNumber","newRecord","key","safeParseInt","val","defaultVal","undefined","trim","num","parseInt","isNaN","safeToString","recordsToCreate","customerId","transferOrder","FG_OBD","Machine_Model","CNC_Serial_No","Material_Code","Material_Description","Batch_No","SO_Donor_Batch","Cert_No","Bin_No","A_D_F","Required_Qty","Issue_stage","Packing_stage","Status","$transaction","tx","eRP_Material_Data","deleteMany","createMany","data","e","Prisma","PrismaClientKnownRequestError","code","InternalServerErrorException","Logger","name"],"mappings":"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"}