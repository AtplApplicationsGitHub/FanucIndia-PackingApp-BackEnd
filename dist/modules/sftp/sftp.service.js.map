{"version":3,"sources":["../../../src/modules/sftp/sftp.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport Client from 'ssh2-sftp-client';\r\nimport * as path from 'path';\r\n\r\ntype ConnectOptions = {\r\n  host: string;\r\n  port: number;\r\n  username: string;\r\n  password?: string;\r\n  privateKey?: Buffer;\r\n  passphrase?: string;\r\n  retries?: number;\r\n  retry_factor?: number;\r\n  retry_minTimeout?: number; \r\n  readyTimeout?: number;     \r\n};\r\n\r\n@Injectable()\r\nexport class SftpService {\r\n  private readonly logger = new Logger(SftpService.name);\r\n\r\n  private getConfig(): ConnectOptions {\r\n    const {\r\n      SFTP_HOST,\r\n      SFTP_PORT,\r\n      SFTP_USERNAME,\r\n      SFTP_PASSWORD,\r\n      SFTP_PRIVATE_KEY,\r\n      SFTP_PASSPHRASE,\r\n      SFTP_RETRIES,\r\n      SFTP_RETRY_FACTOR,\r\n      SFTP_RETRY_MIN_TIMEOUT,\r\n      SFTP_READY_TIMEOUT,\r\n    } = process.env;\r\n\r\n    if (!SFTP_HOST) throw new Error('SFTP_HOST is required');\r\n    if (!SFTP_USERNAME) throw new Error('SFTP_USERNAME is required');\r\n    if (!SFTP_PASSWORD && !SFTP_PRIVATE_KEY) {\r\n      throw new Error('Either SFTP_PASSWORD or SFTP_PRIVATE_KEY must be set');\r\n    }\r\n\r\n    const cfg: ConnectOptions = {\r\n      host: SFTP_HOST,\r\n      port: SFTP_PORT ? Number(SFTP_PORT) : 22,\r\n      username: SFTP_USERNAME,\r\n      retries: SFTP_RETRIES ? Number(SFTP_RETRIES) : 2,\r\n      retry_factor: SFTP_RETRY_FACTOR ? Number(SFTP_RETRY_FACTOR) : 2,\r\n      retry_minTimeout: SFTP_RETRY_MIN_TIMEOUT ? Number(SFTP_RETRY_MIN_TIMEOUT) : 500,\r\n      readyTimeout: SFTP_READY_TIMEOUT ? Number(SFTP_READY_TIMEOUT) : 20000,\r\n    };\r\n\r\n    if (SFTP_PRIVATE_KEY) {\r\n      cfg.privateKey = Buffer.from(SFTP_PRIVATE_KEY, 'base64');\r\n      if (SFTP_PASSPHRASE) cfg.passphrase = SFTP_PASSPHRASE;\r\n    } else {\r\n      cfg.password = SFTP_PASSWORD!;\r\n    }\r\n\r\n    return cfg;\r\n  }\r\n\r\n  private async withClient<T>(fn: (c: Client) => Promise<T>): Promise<T> {\r\n    const client = new Client();\r\n    try {\r\n      await client.connect(this.getConfig());\r\n      return await fn(client);\r\n    } catch (err: any) {\r\n      this.logger.error(`SFTP operation failed: ${err?.message || err}`);\r\n      throw err;\r\n    } finally {\r\n      try {\r\n        await client.end();\r\n      } catch {\r\n      }\r\n    }\r\n  }\r\n\r\n  async ensureDir(remoteDir: string) {\r\n    return this.withClient(async (c) => {\r\n      const segments = path.posix.normalize(remoteDir).split('/');\r\n      let cur = '';\r\n      for (const seg of segments) {\r\n        if (!seg) continue;\r\n        cur += `/${seg}`;\r\n        const exists = await c.exists(cur); \r\n        if (!exists) {\r\n          await c.mkdir(cur);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async put(localPath: string, remotePath: string) {\r\n    const remoteDir = path.posix.dirname(remotePath);\r\n    await this.ensureDir(remoteDir);\r\n    await this.withClient((c) => c.put(localPath, remotePath));\r\n    return { remotePath, remoteDir };\r\n  }\r\n\r\n  async getStream(remotePath: string) {\r\n    return this.withClient((c) => c.get(remotePath)); \r\n  }\r\n\r\n  async delete(remotePath: string) {\r\n    return this.withClient(async (c) => {\r\n      const exists = await c.exists(remotePath);\r\n      if (!exists) return false;\r\n      await c.delete(remotePath, false);\r\n      return true;\r\n    });\r\n  }\r\n}\r\n"],"names":["SftpService","getConfig","SFTP_HOST","SFTP_PORT","SFTP_USERNAME","SFTP_PASSWORD","SFTP_PRIVATE_KEY","SFTP_PASSPHRASE","SFTP_RETRIES","SFTP_RETRY_FACTOR","SFTP_RETRY_MIN_TIMEOUT","SFTP_READY_TIMEOUT","process","env","Error","cfg","host","port","Number","username","retries","retry_factor","retry_minTimeout","readyTimeout","privateKey","Buffer","from","passphrase","password","withClient","fn","client","Client","connect","err","logger","error","message","end","ensureDir","remoteDir","c","segments","path","posix","normalize","split","cur","seg","exists","mkdir","put","localPath","remotePath","dirname","getStream","get","delete","Logger","name"],"mappings":"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"}