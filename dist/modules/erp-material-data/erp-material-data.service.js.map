{"version":3,"sources":["../../../src/modules/erp-material-data/erp-material-data.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  BadRequestException,\r\n  ForbiddenException,\r\n} from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport { Prisma } from '@prisma/client';\r\n\r\nfunction convertBigInts(obj: any): any {\r\n  if (obj === null || obj === undefined) {\r\n    return obj;\r\n  }\r\n  if (typeof obj === 'bigint') {\r\n    return obj.toString();\r\n  }\r\n  if (Array.isArray(obj)) {\r\n    return obj.map(convertBigInts);\r\n  }\r\n  if (typeof obj === 'object') {\r\n    for (const key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        obj[key] = convertBigInts(obj[key]);\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\nasync function verifyOrderAccess(\r\n  prisma: PrismaService,\r\n  orderId: number,\r\n  userId: number,\r\n  userRole: string,\r\n): Promise<Prisma.SalesOrderWhereUniqueInput> {\r\n  if (userRole === 'ADMIN') {\r\n    const order = await prisma.salesOrder.findUnique({\r\n      where: { id: orderId },\r\n    });\r\n    if (!order) throw new NotFoundException('Sales Order not found');\r\n    return { id: orderId };\r\n  }\r\n\r\n  const order = await prisma.salesOrder.findFirst({\r\n    where: { id: orderId, assignedUserId: userId },\r\n  });\r\n  if (!order) {\r\n    throw new ForbiddenException(\r\n      'You do not have permission to access this order.',\r\n    );\r\n  }\r\n  return { id: orderId };\r\n}\r\n\r\n@Injectable()\r\nexport class ErpMaterialDataService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  async getMaterialsByOrderId(\r\n    orderId: number,\r\n    userId: number,\r\n    userRole: string,\r\n  ) {\r\n    await verifyOrderAccess(this.prisma, orderId, userId, userRole);\r\n\r\n    const salesOrder = await this.prisma.salesOrder.findUnique({\r\n      where: { id: orderId },\r\n      select: { saleOrderNumber: true },\r\n    });\r\n    if (!salesOrder) throw new NotFoundException('Sales Order not found');\r\n\r\n    const materials = await this.prisma.eRP_Material_Data.findMany({\r\n      where: { saleOrderNumber: salesOrder.saleOrderNumber },\r\n      orderBy: { ID: 'asc' },\r\n    });\r\n\r\n    return convertBigInts(materials);\r\n  }\r\n\r\n  async incrementIssueStage(\r\n    orderId: number,\r\n    materialCode: string,\r\n    userId: number,\r\n    userRole: string,\r\n  ) {\r\n    await verifyOrderAccess(this.prisma, orderId, userId, userRole);\r\n    const salesOrder = await this.prisma.salesOrder.findUnique({\r\n      where: { id: orderId },\r\n      select: { saleOrderNumber: true },\r\n    });\r\n    if (!salesOrder) throw new NotFoundException('Sales Order not found');\r\n\r\n    const material = await this.prisma.eRP_Material_Data.findFirst({\r\n      where: {\r\n        Material_Code: materialCode,\r\n        saleOrderNumber: salesOrder.saleOrderNumber,\r\n      },\r\n    });\r\n\r\n    if (!material)\r\n      throw new NotFoundException(\r\n        'Material with specified code not found for this order.',\r\n      );\r\n\r\n    if (material.Issue_stage >= material.Required_Qty) {\r\n      throw new BadRequestException('Cannot exceed the Required_Qty value');\r\n    }\r\n\r\n    const user = await this.prisma.user.findUnique({ where: { id: userId } });\r\n    const userName = user ? user.name : 'System';\r\n    \r\n    const updatedMaterial = await this.prisma.eRP_Material_Data.update({\r\n      where: { ID: material.ID },\r\n      data: { \r\n        Issue_stage: { increment: 1 },\r\n        UpdatedBy: userName,\r\n        UpdatedDate: new Date(),\r\n      },\r\n    });\r\n\r\n    const allMaterials = await this.prisma.eRP_Material_Data.findMany({\r\n      where: { saleOrderNumber: salesOrder.saleOrderNumber },\r\n      select: { Issue_stage: true, Required_Qty: true },\r\n    });\r\n\r\n    const allCompleted = allMaterials.every(\r\n      (m) => m.Issue_stage >= m.Required_Qty,\r\n    );\r\n    let issueStageCompleted = false;\r\n    if (allCompleted) {\r\n      await this.prisma.salesOrder.update({\r\n        where: { id: orderId },\r\n        data: { status: 'F105', assignedUserId: null },\r\n      });\r\n      issueStageCompleted = true;\r\n    }\r\n\r\n    return convertBigInts({\r\n      message: 'Issue_stage incremented successfully',\r\n      updatedMaterial,\r\n      issueStageCompleted,\r\n    });\r\n  }\r\n\r\n  async updateIssueStage(\r\n    orderId: number,\r\n    materialCode: string,\r\n    newIssueStage: number,\r\n    userId: number,\r\n    userRole: string,\r\n  ) {\r\n    await verifyOrderAccess(this.prisma, orderId, userId, userRole);\r\n\r\n    const salesOrder = await this.prisma.salesOrder.findUnique({\r\n      where: { id: orderId },\r\n      select: { saleOrderNumber: true },\r\n    });\r\n\r\n    if (!salesOrder) throw new NotFoundException('Sales Order not found');\r\n\r\n    const material = await this.prisma.eRP_Material_Data.findFirst({\r\n      where: {\r\n        Material_Code: materialCode,\r\n        saleOrderNumber: salesOrder.saleOrderNumber,\r\n      },\r\n    });\r\n\r\n    if (!material)\r\n      throw new NotFoundException(\r\n        'Material with specified code not found for this order.',\r\n      );\r\n\r\n    if (newIssueStage > material.Required_Qty) {\r\n      throw new BadRequestException('Cannot exceed the Required_Qty value');\r\n    }\r\n    if (newIssueStage < 0) {\r\n      throw new BadRequestException('Issue_stage cannot be negative');\r\n    }\r\n    \r\n    const user = await this.prisma.user.findUnique({ where: { id: userId } });\r\n    const userName = user ? user.name : 'System';\r\n\r\n    const updatedMaterial = await this.prisma.eRP_Material_Data.update({\r\n      where: { ID: material.ID },\r\n      data: { \r\n        Issue_stage: newIssueStage,\r\n        UpdatedBy: userName,\r\n        UpdatedDate: new Date(),\r\n       },\r\n      select: {\r\n        ID: true, \r\n        Material_Code: true,\r\n        Issue_stage: true,\r\n        Required_Qty: true,\r\n        Packing_stage: true,\r\n      },\r\n    });\r\n\r\n    const allMaterials = await this.prisma.eRP_Material_Data.findMany({\r\n      where: { saleOrderNumber: salesOrder.saleOrderNumber },\r\n      select: { Issue_stage: true, Required_Qty: true },\r\n    });\r\n\r\n    const allCompleted = allMaterials.every(\r\n      (m) => m.Issue_stage >= m.Required_Qty,\r\n    );\r\n    let issueStageCompleted = false; \r\n    if (allCompleted) {\r\n      await this.prisma.salesOrder.update({\r\n        where: { id: orderId },\r\n        data: { status: 'F105', assignedUserId: null },\r\n      });\r\n      issueStageCompleted = true; \r\n    }\r\n\r\n    return convertBigInts({\r\n      message: 'Issue_stage updated successfully',\r\n      updatedMaterial,\r\n      issueStageCompleted,\r\n    });\r\n  }\r\n\r\n  async incrementPackingStage(\r\n    orderId: number,\r\n    materialCode: string,\r\n    userId: number,\r\n    userRole: string,\r\n  ) {\r\n    await verifyOrderAccess(this.prisma, orderId, userId, userRole);\r\n    const salesOrder = await this.prisma.salesOrder.findUnique({\r\n      where: { id: orderId },\r\n      select: { saleOrderNumber: true },\r\n    });\r\n    if (!salesOrder) throw new NotFoundException('Sales Order not found');\r\n\r\n    const material = await this.prisma.eRP_Material_Data.findFirst({\r\n      where: {\r\n        Material_Code: materialCode,\r\n        saleOrderNumber: salesOrder.saleOrderNumber,\r\n      },\r\n    });\r\n\r\n    if (!material)\r\n      throw new NotFoundException(\r\n        'Material with specified code not found for this order.',\r\n      );\r\n\r\n    const cap = Math.min(material.Required_Qty, material.Issue_stage);\r\n    if (material.Packing_stage >= cap) {\r\n      throw new BadRequestException(\r\n        'Cannot exceed the min(Required_Qty, Issue_stage) cap',\r\n      );\r\n    }\r\n\r\n    const user = await this.prisma.user.findUnique({ where: { id: userId } });\r\n    const userName = user ? user.name : 'System';\r\n\r\n    const updatedMaterial = await this.prisma.eRP_Material_Data.update({\r\n      where: { ID: material.ID },\r\n      data: {\r\n        Packing_stage: { increment: 1 },\r\n        UpdatedBy: userName,\r\n        UpdatedDate: new Date(),\r\n      },\r\n    });\r\n\r\n    const allMaterials = await this.prisma.eRP_Material_Data.findMany({\r\n      where: { saleOrderNumber: salesOrder.saleOrderNumber },\r\n      select: { Packing_stage: true, Required_Qty: true },\r\n    });\r\n\r\n    const allPacked = allMaterials.every(\r\n      (m) => m.Packing_stage >= m.Required_Qty,\r\n    );\r\n    let packingStageCompleted = false;\r\n    if (allPacked) {\r\n      await this.prisma.salesOrder.update({\r\n        where: { id: orderId },\r\n        data: { assignedUserId: null },\r\n      });\r\n      packingStageCompleted = true;\r\n    }\r\n\r\n    return convertBigInts({\r\n      message: 'Packing_stage incremented successfully',\r\n      updatedMaterial,\r\n      packingStageCompleted,\r\n    });\r\n  }\r\n\r\n  async updatePackingStage(\r\n    orderId: number,\r\n    materialCode: string,\r\n    newPackingStage: number,\r\n    userId: number,\r\n    userRole: string,\r\n  ) {\r\n    await verifyOrderAccess(this.prisma, orderId, userId, userRole);\r\n    if (newPackingStage < 0) {\r\n      throw new BadRequestException('Packing_stage cannot be negative');\r\n    }\r\n\r\n    const salesOrder = await this.prisma.salesOrder.findUnique({\r\n      where: { id: orderId },\r\n      select: { saleOrderNumber: true },\r\n    });\r\n    if (!salesOrder) throw new NotFoundException('Sales Order not found');\r\n\r\n    const material = await this.prisma.eRP_Material_Data.findFirst({\r\n      where: {\r\n        Material_Code: materialCode,\r\n        saleOrderNumber: salesOrder.saleOrderNumber,\r\n      },\r\n    });\r\n\r\n    if (!material)\r\n      throw new NotFoundException(\r\n        'Material with specified code not found for this order.',\r\n      );\r\n\r\n    const cap = Math.min(material.Required_Qty, material.Issue_stage);\r\n    if (newPackingStage > cap) {\r\n      throw new BadRequestException(\r\n        `Packing_stage cannot exceed min(Required_Qty, Issue_stage) = ${cap}`,\r\n      );\r\n    }\r\n\r\n    const user = await this.prisma.user.findUnique({ where: { id: userId } });\r\n    const userName = user ? user.name : 'System';\r\n\r\n    const updatedMaterial = await this.prisma.eRP_Material_Data.update({\r\n      where: { ID: material.ID },\r\n      data: {\r\n        Packing_stage: newPackingStage,\r\n        UpdatedBy: userName,\r\n        UpdatedDate: new Date(),\r\n      },\r\n    });\r\n\r\n    const allMaterials = await this.prisma.eRP_Material_Data.findMany({\r\n      where: { saleOrderNumber: salesOrder.saleOrderNumber },\r\n      select: { Packing_stage: true, Required_Qty: true },\r\n    });\r\n\r\n    const allPacked = allMaterials.every(\r\n      (m) => m.Packing_stage >= m.Required_Qty,\r\n    );\r\n    let packingStageCompleted = false;\r\n    if (allPacked) {\r\n      await this.prisma.salesOrder.update({\r\n        where: { id: orderId },\r\n        data: { assignedUserId: null },\r\n      });\r\n      packingStageCompleted = true;\r\n    }\r\n\r\n    return convertBigInts({\r\n      message: 'Packing_stage updated successfully',\r\n      updatedMaterial,\r\n      packingStageCompleted,\r\n    });\r\n  }\r\n}"],"names":["ErpMaterialDataService","convertBigInts","obj","undefined","toString","Array","isArray","map","key","Object","prototype","hasOwnProperty","call","verifyOrderAccess","prisma","orderId","userId","userRole","order","salesOrder","findUnique","where","id","NotFoundException","findFirst","assignedUserId","ForbiddenException","getMaterialsByOrderId","select","saleOrderNumber","materials","eRP_Material_Data","findMany","orderBy","ID","incrementIssueStage","materialCode","material","Material_Code","Issue_stage","Required_Qty","BadRequestException","user","userName","name","updatedMaterial","update","data","increment","UpdatedBy","UpdatedDate","Date","allMaterials","allCompleted","every","m","issueStageCompleted","status","message","updateIssueStage","newIssueStage","Packing_stage","incrementPackingStage","cap","Math","min","allPacked","packingStageCompleted","updatePackingStage","newPackingStage"],"mappings":"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"}