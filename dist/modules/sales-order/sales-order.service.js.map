{"version":3,"sources":["../../../src/modules/sales-order/sales-order.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  BadRequestException,\r\n  ConflictException,\r\n  InternalServerErrorException,\r\n} from '@nestjs/common';\r\nimport { Workbook } from 'exceljs';\r\nimport { Response } from 'express';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport { Prisma } from '@prisma/client';\r\n\r\n@Injectable()\r\nexport class SalesOrderService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  async generateBulkTemplate(res: Response) {\r\n    try {\r\n      const workbook = new Workbook();\r\n      const worksheet = workbook.addWorksheet('Bulk Import');\r\n\r\n      worksheet.columns = [\r\n        { header: 'Product', key: 'product' },\r\n        { header: 'Sale Order Number', key: 'saleOrderNumber' },\r\n        { header: 'Outbound Delivery', key: 'outboundDelivery' },\r\n        { header: 'Transfer Order', key: 'transferOrder' },\r\n        { header: 'Delivery Date', key: 'deliveryDate' },\r\n        { header: 'Transporter', key: 'transporter' },\r\n        { header: 'Plant Code', key: 'plantCode' },\r\n        { header: 'Payment Clearance', key: 'paymentClearance' },\r\n        { header: 'Sales Zone', key: 'salesZone' },\r\n        { header: 'Packing Config', key: 'packConfig' },\r\n        { header: 'Customer', key: 'customer' },\r\n        { header: 'Special Remarks', key: 'specialRemarks' },\r\n      ];\r\n\r\n      const [\r\n        products,\r\n        transporters,\r\n        plantCodes,\r\n        salesZones,\r\n        packConfigs,\r\n        customers,\r\n      ] = await Promise.all([\r\n        this.prisma.product.findMany({ orderBy: { name: 'asc' } }),\r\n        this.prisma.transporter.findMany({ orderBy: { name: 'asc' } }),\r\n        this.prisma.plantCode.findMany({ orderBy: { code: 'asc' } }),\r\n        this.prisma.salesZone.findMany({ orderBy: { name: 'asc' } }),\r\n        this.prisma.packConfig.findMany({ orderBy: { configName: 'asc' } }),\r\n        this.prisma.customer.findMany({ orderBy: { name: 'asc' } }),\r\n      ]);\r\n\r\n      const dropdowns: Record<string, string[]> = {\r\n        product: products.map(p => p.name),\r\n        transporter: transporters.map(t => t.name),\r\n        plantCode: plantCodes.map(p => p.code),\r\n        salesZone: salesZones.map(s => s.name),\r\n        packConfig: packConfigs.map(p => p.configName),\r\n        paymentClearance: ['Yes', 'No'],\r\n        customer: customers.map(c => c.name),\r\n      };\r\n\r\n      const ROW_COUNT = 100;\r\n      for (let i = 0; i < ROW_COUNT; i++) worksheet.addRow({});\r\n\r\n      for (const [colKey, values] of Object.entries(dropdowns)) {\r\n        const letter = worksheet.getColumn(colKey).letter;\r\n        for (let row = 2; row <= ROW_COUNT + 1; row++) {\r\n          worksheet.getCell(`${letter}${row}`).dataValidation = {\r\n            type: 'list',\r\n            allowBlank: true,\r\n            formulae: [`\"${values.join(',')}\"`],\r\n          };\r\n        }\r\n      }\r\n\r\n      res\r\n        .status(200)\r\n        .set({\r\n          'Content-Type':\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n          'Content-Disposition':\r\n            'attachment; filename=\"sales_bulk_template.xlsx\"',\r\n        });\r\n      await workbook.xlsx.write(res);\r\n      res.end();\r\n    } catch (err: any) {\r\n      throw new InternalServerErrorException(\r\n        'Failed to generate Excel template',\r\n        err.message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async importBulkOrders(fileBuffer: any, userId: number) {\r\n    let workbook: Workbook;\r\n    try {\r\n      workbook = new Workbook();\r\n      await workbook.xlsx.load(fileBuffer);\r\n    } catch (err: any) {\r\n      throw new BadRequestException(\r\n        'Invalid Excel file format',\r\n        err.message,\r\n      );\r\n    }\r\n\r\n    const worksheet = workbook.getWorksheet('Bulk Import');\r\n    if (!worksheet) {\r\n      throw new BadRequestException('Invalid template format');\r\n    }\r\n\r\n    let products, transporters, plantCodes, salesZones, packConfigs, customers;\r\n    try {\r\n      [\r\n        products,\r\n        transporters,\r\n        plantCodes,\r\n        salesZones,\r\n        packConfigs,\r\n        customers,\r\n      ] = await Promise.all([\r\n        this.prisma.product.findMany(),\r\n        this.prisma.transporter.findMany(),\r\n        this.prisma.plantCode.findMany(),\r\n        this.prisma.salesZone.findMany(),\r\n        this.prisma.packConfig.findMany(),\r\n        this.prisma.customer.findMany(),\r\n      ]);\r\n    } catch (err: any) {\r\n      throw new InternalServerErrorException(\r\n        'Failed to retrieve reference data',\r\n        err.message,\r\n      );\r\n    }\r\n\r\n    const maps = {\r\n      product: new Map(products.map(p => [p.name.trim(), p.id])),\r\n      transporter: new Map(transporters.map(t => [t.name.trim(), t.id])),\r\n      plantCode: new Map(plantCodes.map(pc => [pc.code.trim(), pc.id])),\r\n      salesZone: new Map(salesZones.map(sz => [sz.name.trim(), sz.id])),\r\n      packConfig: new Map(packConfigs.map(pc => [pc.configName.trim(), pc.id])),\r\n      customer: new Map(customers.map(c => [c.name.trim(), c.id])),\r\n    };\r\n\r\n    const ordersToInsert: any[] = [];\r\n    const errors: { row: number; errors: string[] }[] = [];\r\n\r\n    worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {\r\n      if (rowNumber === 1) return; \r\n      const [\r\n        product,\r\n        saleOrderNumber,\r\n        outboundDelivery,\r\n        transferOrder,\r\n        deliveryDate,\r\n        transporter,\r\n        plantCode,\r\n        paymentClearance,\r\n        salesZone,\r\n        packConfig,\r\n        customer,\r\n        specialRemarks,\r\n      ] = (row.values as any[]).slice(1);\r\n\r\n      const rowErrors: string[] = [];\r\n      const productId = maps.product.get((product || '').toString().trim());\r\n      const transporterId = maps.transporter.get((transporter || '').toString().trim());\r\n      const plantCodeId = maps.plantCode.get((plantCode || '').toString().trim());\r\n      const salesZoneId = maps.salesZone.get((salesZone || '').toString().trim());\r\n      const packConfigId = maps.packConfig.get((packConfig || '').toString().trim());\r\n      const customerId = maps.customer.get((customer || '').toString().trim());\r\n\r\n      if (!productId) rowErrors.push('Invalid product');\r\n      if (!saleOrderNumber) rowErrors.push('Missing saleOrderNumber');\r\n      if (!outboundDelivery) rowErrors.push('Missing outboundDelivery');\r\n      if (!transferOrder) rowErrors.push('Missing transferOrder');\r\n      if (!deliveryDate) rowErrors.push('Missing deliveryDate');\r\n      if (!transporterId) rowErrors.push('Invalid transporter');\r\n      if (!plantCodeId) rowErrors.push('Invalid plantCode');\r\n      if (!['Yes', 'No', true, false].includes(paymentClearance))\r\n        rowErrors.push('Invalid paymentClearance (must be Yes or No)');\r\n      if (!salesZoneId) rowErrors.push('Invalid salesZone');\r\n      if (!packConfigId) rowErrors.push('Invalid packConfig');\r\n      if (!customerId) rowErrors.push('Invalid customer');\r\n\r\n      let deliveryDateObj: Date | null = null;\r\n      if (deliveryDate) {\r\n        const dt = new Date(deliveryDate);\r\n        if (isNaN(dt.getTime())) {\r\n          rowErrors.push('Invalid deliveryDate format');\r\n        } else {\r\n          deliveryDateObj = dt;\r\n        }\r\n      }\r\n\r\n      if (rowErrors.length) {\r\n        errors.push({ row: rowNumber, errors: rowErrors });\r\n      } else {\r\n        ordersToInsert.push({\r\n          productId,\r\n          saleOrderNumber: saleOrderNumber.toString(),\r\n          outboundDelivery: outboundDelivery.toString(),\r\n          transferOrder: transferOrder.toString(),\r\n          deliveryDate: deliveryDateObj,\r\n          transporterId,\r\n          plantCodeId,\r\n          paymentClearance: paymentClearance === 'Yes' || paymentClearance === true,\r\n          salesZoneId,\r\n          packConfigId,\r\n          customerId,\r\n          specialRemarks: specialRemarks?.toString(),\r\n          userId,\r\n        });\r\n      }\r\n    });\r\n\r\n    if (errors.length > 0) {\r\n      throw new BadRequestException({\r\n        message: 'Import failed due to errors in the file. No orders were imported.',\r\n        errors,\r\n      });\r\n    }\r\n\r\n    if (ordersToInsert.length === 0) {\r\n      throw new BadRequestException({\r\n        message: 'No valid orders found to insert.',\r\n        errors,\r\n      });\r\n    }\r\n\r\n    const saleOrderNumbers = ordersToInsert.map(o => o.saleOrderNumber);\r\n    const outboundDeliveries = ordersToInsert.map(o => o.outboundDelivery);\r\n    const transferOrders = ordersToInsert.map(o => o.transferOrder);\r\n\r\n    const hasDuplicates = (arr: string[]) => new Set(arr).size !== arr.length;\r\n    if (hasDuplicates(saleOrderNumbers)) {\r\n      throw new BadRequestException('The import file contains duplicate Sale Order Numbers.');\r\n    }\r\n    if (hasDuplicates(outboundDeliveries)) {\r\n      throw new BadRequestException('The import file contains duplicate Outbound Delivery numbers.');\r\n    }\r\n    if (hasDuplicates(transferOrders)) {\r\n      throw new BadRequestException('The import file contains duplicate Transfer Order numbers.');\r\n    }\r\n    \r\n    const existingOrders = await this.prisma.salesOrder.findMany({\r\n      where: {\r\n        OR: [\r\n          { saleOrderNumber: { in: saleOrderNumbers } },\r\n          { outboundDelivery: { in: outboundDeliveries } },\r\n          { transferOrder: { in: transferOrders } },\r\n        ],\r\n      },\r\n    });\r\n\r\n    if (existingOrders.length > 0) {\r\n      const existingSO = existingOrders.find(e => saleOrderNumbers.includes(e.saleOrderNumber));\r\n      if (existingSO) {\r\n        throw new ConflictException(`An order with Sale Order Number '${existingSO.saleOrderNumber}' already exists.`);\r\n      }\r\n      const existingOBD = existingOrders.find(e => outboundDeliveries.includes(e.outboundDelivery));\r\n      if (existingOBD) {\r\n        throw new ConflictException(`An order with Outbound Delivery '${existingOBD.outboundDelivery}' already exists.`);\r\n      }\r\n      const existingTO = existingOrders.find(e => transferOrders.includes(e.transferOrder));\r\n      if (existingTO) {\r\n        throw new ConflictException(`An order with Transfer Order '${existingTO.transferOrder}' already exists.`);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n      const insertedCount = await this.prisma.$transaction(async (tx) => {\r\n        let count = 0;\r\n        for (const orderData of ordersToInsert) {\r\n          await tx.salesOrder.create({\r\n            data: orderData,\r\n          });\r\n          count++;\r\n          await delay(10); \r\n        }\r\n        return count;\r\n      });\r\n\r\n      return {\r\n        message: `Inserted ${insertedCount} orders.`,\r\n        errors,\r\n        insertedCount,\r\n      };\r\n    } catch (err: any) {\r\n      if (\r\n        err instanceof Prisma.PrismaClientKnownRequestError &&\r\n        err.code === 'P2002'\r\n      ) {\r\n        const target = (err.meta?.target as string[])?.join(', ');\r\n        throw new ConflictException(\r\n          `Database error: A duplicate order was detected. The value for '${target}' must be unique.`,\r\n        );\r\n      }\r\n      throw new InternalServerErrorException(\r\n        'Database insertion failed',\r\n        err.message,\r\n      );\r\n    }\r\n  }\r\n}"],"names":["SalesOrderService","generateBulkTemplate","res","workbook","Workbook","worksheet","addWorksheet","columns","header","key","products","transporters","plantCodes","salesZones","packConfigs","customers","Promise","all","prisma","product","findMany","orderBy","name","transporter","plantCode","code","salesZone","packConfig","configName","customer","dropdowns","map","p","t","s","paymentClearance","c","ROW_COUNT","i","addRow","colKey","values","Object","entries","letter","getColumn","row","getCell","dataValidation","type","allowBlank","formulae","join","status","set","xlsx","write","end","err","InternalServerErrorException","message","importBulkOrders","fileBuffer","userId","load","BadRequestException","getWorksheet","maps","Map","trim","id","pc","sz","ordersToInsert","errors","eachRow","includeEmpty","rowNumber","saleOrderNumber","outboundDelivery","transferOrder","deliveryDate","specialRemarks","slice","rowErrors","productId","get","toString","transporterId","plantCodeId","salesZoneId","packConfigId","customerId","push","includes","deliveryDateObj","dt","Date","isNaN","getTime","length","saleOrderNumbers","o","outboundDeliveries","transferOrders","hasDuplicates","arr","Set","size","existingOrders","salesOrder","where","OR","in","existingSO","find","e","ConflictException","existingOBD","existingTO","delay","ms","resolve","setTimeout","insertedCount","$transaction","tx","count","orderData","create","data","Prisma","PrismaClientKnownRequestError","target","meta"],"mappings":"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"}