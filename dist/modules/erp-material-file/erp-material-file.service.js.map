{"version":3,"sources":["../../../src/modules/erp-material-file/erp-material-file.service.ts"],"sourcesContent":["import {\r\n  ConflictException,\r\n  Injectable,\r\n  InternalServerErrorException,\r\n  NotFoundException,\r\n  BadRequestException,\r\n  ForbiddenException,\r\n} from '@nestjs/common';\r\nimport { Prisma } from '@prisma/client';\r\nimport { PrismaService } from '../../prisma.service';\r\nimport { SftpService } from '../sftp/sftp.service';\r\nimport * as path from 'path';\r\nimport { createHash } from 'crypto';\r\nimport * as fs from 'fs';\r\nimport { CreateErpMaterialFileDto } from './dto/create-erp-material-file.dto';\r\nimport { UpdateErpMaterialFileDto } from './dto/update-erp-material-file.dto';\r\nimport { QueryErpMaterialFileDto } from './dto/query-erp-material-file.dto';\r\n\r\nasync function verifyFileAccess(\r\n  prisma: PrismaService,\r\n  fileId: number,\r\n  userId: number,\r\n  userRole: string,\r\n) {\r\n  if (userRole === 'ADMIN' || userRole === 'SALES') {\r\n    const file = await prisma.eRP_Material_File.findUnique({ where: { ID: fileId } });\r\n    if (!file) throw new NotFoundException('File not found.');\r\n    return file;\r\n  }\r\n\r\n  const file = await prisma.eRP_Material_File.findUnique({\r\n    where: { ID: fileId },\r\n    include: {\r\n      salesOrderByNumber: true,\r\n    },\r\n  });\r\n\r\n  if (!file) {\r\n    throw new NotFoundException('File not found.');\r\n  }\r\n\r\n  if (!file.salesOrderByNumber || file.salesOrderByNumber.assignedUserId !== userId) {\r\n    throw new ForbiddenException('You do not have permission to access this file.');\r\n  }\r\n\r\n  return file;\r\n}\r\n\r\nasync function verifySaleOrderAccess(\r\n  prisma: PrismaService,\r\n  saleOrderNumber: string,\r\n  userId: number,\r\n  userRole: string,\r\n) {\r\n  if (userRole === 'ADMIN' || userRole === 'SALES') {\r\n    const order = await prisma.salesOrder.findUnique({ where: { saleOrderNumber } });\r\n    if (!order) throw new NotFoundException(`Sales Order ${saleOrderNumber} not found.`);\r\n    return;\r\n  }\r\n\r\n  const order = await prisma.salesOrder.findFirst({\r\n    where: {\r\n      saleOrderNumber: saleOrderNumber,\r\n      assignedUserId: userId,\r\n    },\r\n  });\r\n\r\n  if (!order) {\r\n    throw new ForbiddenException(`You do not have permission to access files for Sales Order ${saleOrderNumber}.`);\r\n  }\r\n}\r\n\r\nfunction sanitize(name: string) {\r\n  return name.replace(/[^a-zA-Z0-9._-]/g, '_');\r\n}\r\n\r\nfunction normalizeBigInt<T>(obj: T): any {\r\n  if (obj === null || obj === undefined) return obj;\r\n  if (typeof obj === 'bigint') return Number(obj);\r\n  if (Array.isArray(obj)) return obj.map((v) => normalizeBigInt(v));\r\n  if (typeof obj === 'object') {\r\n    const out: any = {};\r\n    for (const [k, v] of Object.entries(obj as any))\r\n      out[k] = normalizeBigInt(v);\r\n    return out;\r\n  }\r\n  return obj;\r\n}\r\n\r\n@Injectable()\r\nexport class ErpMaterialFileService {\r\n  constructor(\r\n    private readonly prisma: PrismaService,\r\n    private readonly sftp: SftpService,\r\n  ) {}\r\n\r\n  async list(query: QueryErpMaterialFileDto, userId: number, userRole: string) {\r\n    const {\r\n      page = 1,\r\n      limit = 20,\r\n      search,\r\n      saleOrderNumber,\r\n      sortBy = 'createdAt',\r\n      sortOrder = 'desc',\r\n    } = query;\r\n\r\n    const skip = (page - 1) * limit;\r\n\r\n    const where: Prisma.ERP_Material_FileWhereInput = {\r\n      ...(saleOrderNumber ? { saleOrderNumber } : {}),\r\n      ...(search\r\n        ? {\r\n            OR: [\r\n              { fileName: { contains: search } },\r\n              { description: { contains: search } },\r\n              { saleOrderNumber: { contains: search } },\r\n            ],\r\n          }\r\n        : {}),\r\n    };\r\n\r\n    if (userRole === 'USER') {\r\n        where.salesOrderByNumber = {\r\n            is: {\r\n                assignedUserId: userId,\r\n            }\r\n        }\r\n    }\r\n\r\n    const [items, total] = await this.prisma.$transaction([\r\n      this.prisma.eRP_Material_File.findMany({\r\n        where,\r\n        skip,\r\n        take: limit,\r\n        orderBy: { [sortBy]: sortOrder },\r\n        include: {\r\n          salesOrderByNumber: true,\r\n        },\r\n      }),\r\n      this.prisma.eRP_Material_File.count({ where }),\r\n    ]);\r\n\r\n    return normalizeBigInt({\r\n      items,\r\n      meta: { page, limit, total, pages: Math.ceil(total / limit) },\r\n    });\r\n  }\r\n\r\n  async get(id: number, userId: number, userRole: string) {\r\n    const row = await verifyFileAccess(this.prisma, id, userId, userRole);\r\n    return normalizeBigInt(row);\r\n  }\r\n\r\n  async listBySaleOrderNumber(soNumber: string, userId: number, userRole: string) {\r\n    await verifySaleOrderAccess(this.prisma, soNumber, userId, userRole);\r\n    const items = await this.prisma.eRP_Material_File.findMany({\r\n      where: { saleOrderNumber: soNumber },\r\n      orderBy: { createdAt: 'desc' },\r\n    });\r\n    return normalizeBigInt(items);\r\n  }\r\n\r\n  async create(_dto: CreateErpMaterialFileDto) {\r\n    throw new BadRequestException(\r\n      'Direct creation is disabled. Use /v1/erp-material-files/upload to create records.',\r\n    );\r\n  }\r\n\r\n  async update(id: number, dto: UpdateErpMaterialFileDto, userId: number, userRole: string) {\r\n    const existing = await verifyFileAccess(this.prisma, id, userId, userRole);\r\n\r\n    try {\r\n      const updated = await this.prisma.eRP_Material_File.update({\r\n        where: { ID: id },\r\n        data: {\r\n          saleOrderNumber:\r\n            dto.saleOrderNumber !== undefined\r\n              ? dto.saleOrderNumber\r\n              : existing.saleOrderNumber,\r\n          fileName: dto.fileName ?? existing.fileName,\r\n          description:\r\n            dto.description !== undefined\r\n              ? dto.description\r\n              : existing.description,\r\n        },\r\n      });\r\n      return normalizeBigInt(updated);\r\n    } catch (e: any) {\r\n      if (\r\n        e instanceof Prisma.PrismaClientKnownRequestError &&\r\n        e.code === 'P2002'\r\n      ) {\r\n        throw new ConflictException(\r\n          'Update violates unique constraint (saleOrderNumber, fileName).',\r\n        );\r\n      }\r\n      throw new InternalServerErrorException(\r\n        'Failed to update ERP material file.',\r\n      );\r\n    }\r\n  }\r\n\r\n  async remove(id: number, userId: number, userRole: string) {\r\n    const existing = await verifyFileAccess(this.prisma, id, userId, userRole);\r\n\r\n    try {\r\n      if (existing.sftpPath) {\r\n        await this.sftp.delete(existing.sftpPath);\r\n      }\r\n    } catch (e) {\r\n      console.warn('SFTP delete failed but proceeding with DB cleanup', e);\r\n    }\r\n\r\n    await this.prisma.eRP_Material_File.delete({ where: { ID: id } });\r\n    return { success: true };\r\n  }\r\n\r\n  async uploadAndCreate(\r\n    files: Express.Multer.File[],\r\n    opts: { saleOrderNumber: string | null; description: string | null },\r\n    userId: number,\r\n    userRole: string,\r\n  ) {\r\n    if (opts.saleOrderNumber) {\r\n        await verifySaleOrderAccess(this.prisma, opts.saleOrderNumber, userId, userRole);\r\n    } else if (userRole === 'USER') {\r\n        throw new ForbiddenException(\"You must specify a Sale Order Number for an order assigned to you.\");\r\n    }\r\n\r\n    const baseDir = process.env.SFTP_BASE_DIR || '/fanuc/order-attachments';\r\n    const soDir = opts.saleOrderNumber\r\n      ? sanitize(opts.saleOrderNumber)\r\n      : 'misc';\r\n    const remoteDir = path.posix.join(baseDir, soDir);\r\n\r\n    const created: any[] = [];\r\n    try {\r\n      for (const f of files) {\r\n        const checksum = await sha256File(f.path);\r\n        const remoteName = f.filename;\r\n        const remotePath = path.posix.join(remoteDir, remoteName);\r\n\r\n        await this.sftp.put(f.path, remotePath);\r\n\r\n        const row = await this.prisma.eRP_Material_File.create({\r\n          data: {\r\n            saleOrderNumber: opts.saleOrderNumber,\r\n            fileName: f.originalname,\r\n            description: opts.description,\r\n            sftpPath: remotePath,\r\n            sftpDir: remoteDir,\r\n            fileSizeBytes: BigInt(f.size),\r\n            mimeType: f.mimetype,\r\n            checksumSha256: checksum,\r\n          },\r\n        });\r\n\r\n        created.push(row);\r\n      }\r\n      return {\r\n        success: true,\r\n        items: created.map((r) => ({\r\n          ...r,\r\n          fileSizeBytes: Number(r.fileSizeBytes),\r\n        })),\r\n      };\r\n    } catch (e: any) {\r\n      throw new InternalServerErrorException(\r\n        'Upload failed. ' + (e?.message || ''),\r\n      );\r\n    } finally {\r\n      for (const f of files) {\r\n        try {\r\n          fs.unlinkSync(f.path);\r\n        } catch {}\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nasync function sha256File(localPath: string): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const hash = createHash('sha256');\r\n    const stream = fs.createReadStream(localPath);\r\n    stream.on('error', reject);\r\n    stream.on('data', (d) => hash.update(d));\r\n    stream.on('end', () => resolve(hash.digest('hex')));\r\n  });\r\n}\r\n"],"names":["ErpMaterialFileService","verifyFileAccess","prisma","fileId","userId","userRole","file","eRP_Material_File","findUnique","where","ID","NotFoundException","include","salesOrderByNumber","assignedUserId","ForbiddenException","verifySaleOrderAccess","saleOrderNumber","order","salesOrder","findFirst","sanitize","name","replace","normalizeBigInt","obj","undefined","Number","Array","isArray","map","v","out","k","Object","entries","list","query","page","limit","search","sortBy","sortOrder","skip","OR","fileName","contains","description","is","items","total","$transaction","findMany","take","orderBy","count","meta","pages","Math","ceil","get","id","row","listBySaleOrderNumber","soNumber","createdAt","create","_dto","BadRequestException","update","dto","existing","updated","data","e","Prisma","PrismaClientKnownRequestError","code","ConflictException","InternalServerErrorException","remove","sftpPath","sftp","delete","console","warn","success","uploadAndCreate","files","opts","baseDir","process","env","SFTP_BASE_DIR","soDir","remoteDir","path","posix","join","created","f","checksum","sha256File","remoteName","filename","remotePath","put","originalname","sftpDir","fileSizeBytes","BigInt","size","mimeType","mimetype","checksumSha256","push","r","message","fs","unlinkSync","localPath","Promise","resolve","reject","hash","createHash","stream","createReadStream","on","d","digest"],"mappings":";;;;+BA0FaA;;;eAAAA;;;wBAnFN;wBACgB;+BACO;6BACF;8DACN;wBACK;4DACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKpB,eAAeC,iBACbC,MAAqB,EACrBC,MAAc,EACdC,MAAc,EACdC,QAAgB;IAEhB,IAAIA,aAAa,WAAWA,aAAa,SAAS;QAChD,MAAMC,OAAO,MAAMJ,OAAOK,iBAAiB,CAACC,UAAU,CAAC;YAAEC,OAAO;gBAAEC,IAAIP;YAAO;QAAE;QAC/E,IAAI,CAACG,MAAM,MAAM,IAAIK,yBAAiB,CAAC;QACvC,OAAOL;IACT;IAEA,MAAMA,OAAO,MAAMJ,OAAOK,iBAAiB,CAACC,UAAU,CAAC;QACrDC,OAAO;YAAEC,IAAIP;QAAO;QACpBS,SAAS;YACPC,oBAAoB;QACtB;IACF;IAEA,IAAI,CAACP,MAAM;QACT,MAAM,IAAIK,yBAAiB,CAAC;IAC9B;IAEA,IAAI,CAACL,KAAKO,kBAAkB,IAAIP,KAAKO,kBAAkB,CAACC,cAAc,KAAKV,QAAQ;QACjF,MAAM,IAAIW,0BAAkB,CAAC;IAC/B;IAEA,OAAOT;AACT;AAEA,eAAeU,sBACbd,MAAqB,EACrBe,eAAuB,EACvBb,MAAc,EACdC,QAAgB;IAEhB,IAAIA,aAAa,WAAWA,aAAa,SAAS;QAChD,MAAMa,QAAQ,MAAMhB,OAAOiB,UAAU,CAACX,UAAU,CAAC;YAAEC,OAAO;gBAAEQ;YAAgB;QAAE;QAC9E,IAAI,CAACC,OAAO,MAAM,IAAIP,yBAAiB,CAAC,CAAC,YAAY,EAAEM,gBAAgB,WAAW,CAAC;QACnF;IACF;IAEA,MAAMC,QAAQ,MAAMhB,OAAOiB,UAAU,CAACC,SAAS,CAAC;QAC9CX,OAAO;YACLQ,iBAAiBA;YACjBH,gBAAgBV;QAClB;IACF;IAEA,IAAI,CAACc,OAAO;QACV,MAAM,IAAIH,0BAAkB,CAAC,CAAC,2DAA2D,EAAEE,gBAAgB,CAAC,CAAC;IAC/G;AACF;AAEA,SAASI,SAASC,IAAY;IAC5B,OAAOA,KAAKC,OAAO,CAAC,oBAAoB;AAC1C;AAEA,SAASC,gBAAmBC,GAAM;IAChC,IAAIA,QAAQ,QAAQA,QAAQC,WAAW,OAAOD;IAC9C,IAAI,OAAOA,QAAQ,UAAU,OAAOE,OAAOF;IAC3C,IAAIG,MAAMC,OAAO,CAACJ,MAAM,OAAOA,IAAIK,GAAG,CAAC,CAACC,IAAMP,gBAAgBO;IAC9D,IAAI,OAAON,QAAQ,UAAU;QAC3B,MAAMO,MAAW,CAAC;QAClB,KAAK,MAAM,CAACC,GAAGF,EAAE,IAAIG,OAAOC,OAAO,CAACV,KAClCO,GAAG,CAACC,EAAE,GAAGT,gBAAgBO;QAC3B,OAAOC;IACT;IACA,OAAOP;AACT;AAGO,IAAA,AAAMzB,yBAAN,MAAMA;IAMX,MAAMoC,KAAKC,KAA8B,EAAEjC,MAAc,EAAEC,QAAgB,EAAE;QAC3E,MAAM,EACJiC,OAAO,CAAC,EACRC,QAAQ,EAAE,EACVC,MAAM,EACNvB,eAAe,EACfwB,SAAS,WAAW,EACpBC,YAAY,MAAM,EACnB,GAAGL;QAEJ,MAAMM,OAAO,AAACL,CAAAA,OAAO,CAAA,IAAKC;QAE1B,MAAM9B,QAA4C;YAChD,GAAIQ,kBAAkB;gBAAEA;YAAgB,IAAI,CAAC,CAAC;YAC9C,GAAIuB,SACA;gBACEI,IAAI;oBACF;wBAAEC,UAAU;4BAAEC,UAAUN;wBAAO;oBAAE;oBACjC;wBAAEO,aAAa;4BAAED,UAAUN;wBAAO;oBAAE;oBACpC;wBAAEvB,iBAAiB;4BAAE6B,UAAUN;wBAAO;oBAAE;iBACzC;YACH,IACA,CAAC,CAAC;QACR;QAEA,IAAInC,aAAa,QAAQ;YACrBI,MAAMI,kBAAkB,GAAG;gBACvBmC,IAAI;oBACAlC,gBAAgBV;gBACpB;YACJ;QACJ;QAEA,MAAM,CAAC6C,OAAOC,MAAM,GAAG,MAAM,IAAI,CAAChD,MAAM,CAACiD,YAAY,CAAC;YACpD,IAAI,CAACjD,MAAM,CAACK,iBAAiB,CAAC6C,QAAQ,CAAC;gBACrC3C;gBACAkC;gBACAU,MAAMd;gBACNe,SAAS;oBAAE,CAACb,OAAO,EAAEC;gBAAU;gBAC/B9B,SAAS;oBACPC,oBAAoB;gBACtB;YACF;YACA,IAAI,CAACX,MAAM,CAACK,iBAAiB,CAACgD,KAAK,CAAC;gBAAE9C;YAAM;SAC7C;QAED,OAAOe,gBAAgB;YACrByB;YACAO,MAAM;gBAAElB;gBAAMC;gBAAOW;gBAAOO,OAAOC,KAAKC,IAAI,CAACT,QAAQX;YAAO;QAC9D;IACF;IAEA,MAAMqB,IAAIC,EAAU,EAAEzD,MAAc,EAAEC,QAAgB,EAAE;QACtD,MAAMyD,MAAM,MAAM7D,iBAAiB,IAAI,CAACC,MAAM,EAAE2D,IAAIzD,QAAQC;QAC5D,OAAOmB,gBAAgBsC;IACzB;IAEA,MAAMC,sBAAsBC,QAAgB,EAAE5D,MAAc,EAAEC,QAAgB,EAAE;QAC9E,MAAMW,sBAAsB,IAAI,CAACd,MAAM,EAAE8D,UAAU5D,QAAQC;QAC3D,MAAM4C,QAAQ,MAAM,IAAI,CAAC/C,MAAM,CAACK,iBAAiB,CAAC6C,QAAQ,CAAC;YACzD3C,OAAO;gBAAEQ,iBAAiB+C;YAAS;YACnCV,SAAS;gBAAEW,WAAW;YAAO;QAC/B;QACA,OAAOzC,gBAAgByB;IACzB;IAEA,MAAMiB,OAAOC,IAA8B,EAAE;QAC3C,MAAM,IAAIC,2BAAmB,CAC3B;IAEJ;IAEA,MAAMC,OAAOR,EAAU,EAAES,GAA6B,EAAElE,MAAc,EAAEC,QAAgB,EAAE;QACxF,MAAMkE,WAAW,MAAMtE,iBAAiB,IAAI,CAACC,MAAM,EAAE2D,IAAIzD,QAAQC;QAEjE,IAAI;YACF,MAAMmE,UAAU,MAAM,IAAI,CAACtE,MAAM,CAACK,iBAAiB,CAAC8D,MAAM,CAAC;gBACzD5D,OAAO;oBAAEC,IAAImD;gBAAG;gBAChBY,MAAM;oBACJxD,iBACEqD,IAAIrD,eAAe,KAAKS,YACpB4C,IAAIrD,eAAe,GACnBsD,SAAStD,eAAe;oBAC9B4B,UAAUyB,IAAIzB,QAAQ,IAAI0B,SAAS1B,QAAQ;oBAC3CE,aACEuB,IAAIvB,WAAW,KAAKrB,YAChB4C,IAAIvB,WAAW,GACfwB,SAASxB,WAAW;gBAC5B;YACF;YACA,OAAOvB,gBAAgBgD;QACzB,EAAE,OAAOE,GAAQ;YACf,IACEA,aAAaC,cAAM,CAACC,6BAA6B,IACjDF,EAAEG,IAAI,KAAK,SACX;gBACA,MAAM,IAAIC,yBAAiB,CACzB;YAEJ;YACA,MAAM,IAAIC,oCAA4B,CACpC;QAEJ;IACF;IAEA,MAAMC,OAAOnB,EAAU,EAAEzD,MAAc,EAAEC,QAAgB,EAAE;QACzD,MAAMkE,WAAW,MAAMtE,iBAAiB,IAAI,CAACC,MAAM,EAAE2D,IAAIzD,QAAQC;QAEjE,IAAI;YACF,IAAIkE,SAASU,QAAQ,EAAE;gBACrB,MAAM,IAAI,CAACC,IAAI,CAACC,MAAM,CAACZ,SAASU,QAAQ;YAC1C;QACF,EAAE,OAAOP,GAAG;YACVU,QAAQC,IAAI,CAAC,qDAAqDX;QACpE;QAEA,MAAM,IAAI,CAACxE,MAAM,CAACK,iBAAiB,CAAC4E,MAAM,CAAC;YAAE1E,OAAO;gBAAEC,IAAImD;YAAG;QAAE;QAC/D,OAAO;YAAEyB,SAAS;QAAK;IACzB;IAEA,MAAMC,gBACJC,KAA4B,EAC5BC,IAAoE,EACpErF,MAAc,EACdC,QAAgB,EAChB;QACA,IAAIoF,KAAKxE,eAAe,EAAE;YACtB,MAAMD,sBAAsB,IAAI,CAACd,MAAM,EAAEuF,KAAKxE,eAAe,EAAEb,QAAQC;QAC3E,OAAO,IAAIA,aAAa,QAAQ;YAC5B,MAAM,IAAIU,0BAAkB,CAAC;QACjC;QAEA,MAAM2E,UAAUC,QAAQC,GAAG,CAACC,aAAa,IAAI;QAC7C,MAAMC,QAAQL,KAAKxE,eAAe,GAC9BI,SAASoE,KAAKxE,eAAe,IAC7B;QACJ,MAAM8E,YAAYC,MAAKC,KAAK,CAACC,IAAI,CAACR,SAASI;QAE3C,MAAMK,UAAiB,EAAE;QACzB,IAAI;YACF,KAAK,MAAMC,KAAKZ,MAAO;gBACrB,MAAMa,WAAW,MAAMC,WAAWF,EAAEJ,IAAI;gBACxC,MAAMO,aAAaH,EAAEI,QAAQ;gBAC7B,MAAMC,aAAaT,MAAKC,KAAK,CAACC,IAAI,CAACH,WAAWQ;gBAE9C,MAAM,IAAI,CAACrB,IAAI,CAACwB,GAAG,CAACN,EAAEJ,IAAI,EAAES;gBAE5B,MAAM3C,MAAM,MAAM,IAAI,CAAC5D,MAAM,CAACK,iBAAiB,CAAC2D,MAAM,CAAC;oBACrDO,MAAM;wBACJxD,iBAAiBwE,KAAKxE,eAAe;wBACrC4B,UAAUuD,EAAEO,YAAY;wBACxB5D,aAAa0C,KAAK1C,WAAW;wBAC7BkC,UAAUwB;wBACVG,SAASb;wBACTc,eAAeC,OAAOV,EAAEW,IAAI;wBAC5BC,UAAUZ,EAAEa,QAAQ;wBACpBC,gBAAgBb;oBAClB;gBACF;gBAEAF,QAAQgB,IAAI,CAACrD;YACf;YACA,OAAO;gBACLwB,SAAS;gBACTrC,OAAOkD,QAAQrE,GAAG,CAAC,CAACsF,IAAO,CAAA;wBACzB,GAAGA,CAAC;wBACJP,eAAelF,OAAOyF,EAAEP,aAAa;oBACvC,CAAA;YACF;QACF,EAAE,OAAOnC,GAAQ;YACf,MAAM,IAAIK,oCAA4B,CACpC,oBAAqBL,CAAAA,GAAG2C,WAAW,EAAC;QAExC,SAAU;YACR,KAAK,MAAMjB,KAAKZ,MAAO;gBACrB,IAAI;oBACF8B,IAAGC,UAAU,CAACnB,EAAEJ,IAAI;gBACtB,EAAE,OAAM,CAAC;YACX;QACF;IACF;IA1LA,YACE,AAAiB9F,MAAqB,EACtC,AAAiBgF,IAAiB,CAClC;aAFiBhF,SAAAA;aACAgF,OAAAA;IAChB;AAwLL;;;;;;;;;AAEA,eAAeoB,WAAWkB,SAAiB;IACzC,OAAO,IAAIC,QAAQ,CAACC,SAASC;QAC3B,MAAMC,OAAOC,IAAAA,kBAAU,EAAC;QACxB,MAAMC,SAASR,IAAGS,gBAAgB,CAACP;QACnCM,OAAOE,EAAE,CAAC,SAASL;QACnBG,OAAOE,EAAE,CAAC,QAAQ,CAACC,IAAML,KAAKvD,MAAM,CAAC4D;QACrCH,OAAOE,EAAE,CAAC,OAAO,IAAMN,QAAQE,KAAKM,MAAM,CAAC;IAC7C;AACF"}