{"version":3,"sources":["../../../src/modules/erp-material-file/erp-material-file.controller.ts"],"sourcesContent":["import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Param,\r\n  ParseIntPipe,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  UploadedFiles,\r\n  UseInterceptors,\r\n  BadRequestException,\r\n  Res,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiOperation,\r\n  ApiParam,\r\n  ApiTags,\r\n  ApiConsumes,\r\n} from '@nestjs/swagger';\r\nimport { FilesInterceptor } from '@nestjs/platform-express';\r\nimport { diskStorage } from 'multer';\r\nimport * as os from 'os';\r\nimport { randomUUID } from 'crypto';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { ErpMaterialFileService } from './erp-material-file.service';\r\nimport { CreateErpMaterialFileDto } from './dto/create-erp-material-file.dto';\r\nimport { UpdateErpMaterialFileDto } from './dto/update-erp-material-file.dto';\r\nimport { QueryErpMaterialFileDto } from './dto/query-erp-material-file.dto';\r\nimport { Response } from 'express';\r\nimport { SftpService } from '../sftp/sftp.service';\r\nimport { AuthRequest } from '../auth/types/auth-request.type';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\n\r\nconst MAX_UPLOAD_BYTES = Number(\r\n  process.env.MAX_UPLOAD_BYTES || 50 * 1024 * 1024,\r\n);\r\n\r\nfunction splitExt(name: string) {\r\n  const i = name.lastIndexOf('.');\r\n  if (i <= 0) return { base: name, ext: '' }; \r\n  return { base: name.slice(0, i), ext: name.slice(i) };\r\n}\r\nfunction sanitizeBase(name: string) {\r\n  return name\r\n    .replace(/[^a-zA-Z0-9._-]/g, '_')\r\n    .replace(/_+/g, '_')\r\n    .replace(/^_+|_+$/g, '');\r\n}\r\n\r\n@ApiTags('erp-material-files')\r\n@ApiBearerAuth()\r\n@UseGuards(JwtAuthGuard)\r\n@Controller({ path: 'v1/erp-material-files', version: '1' })\r\nexport class ErpMaterialFileController {\r\n  constructor(\r\n    private readonly service: ErpMaterialFileService,\r\n    private readonly sftp: SftpService,\r\n  ) {}\r\n\r\n  @Get()\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiOperation({\r\n    summary: 'List ERP material files with pagination, search & filters',\r\n  })\r\n  async list(@Query() query: QueryErpMaterialFileDto, @Req() req: AuthRequest) {\r\n    const { userId, role } = req.user;\r\n    return this.service.list(query, userId, role);\r\n  }\r\n\r\n  @Get('by-sale-order/:saleOrderNumber')\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiOperation({ summary: 'List files by exact sale order number' })\r\n  @ApiParam({ name: 'saleOrderNumber', type: String })\r\n  async listBySaleOrder(\r\n      @Param('saleOrderNumber') saleOrderNumber: string,\r\n      @Req() req: AuthRequest\r\n    ) {\r\n    const { userId, role } = req.user;\r\n    return this.service.listBySaleOrderNumber(saleOrderNumber, userId, role);\r\n  }\r\n\r\n  @Get(':id')\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiOperation({ summary: 'Get a file record by ID' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  async get(@Param('id', ParseIntPipe) id: number, @Req() req: AuthRequest) {\r\n    const { userId, role } = req.user;\r\n    return this.service.get(id, userId, role);\r\n  }\r\n\r\n  @Post()\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiOperation({ summary: 'Create a file record (metadata only)' })\r\n  async create(@Body() dto: CreateErpMaterialFileDto) {\r\n    return this.service.create(dto);\r\n  }\r\n\r\n  @Put(':id')\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiOperation({ summary: 'Update a file record' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  async update(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Body() dto: UpdateErpMaterialFileDto,\r\n    @Req() req: AuthRequest\r\n  ) {\r\n    const { userId, role } = req.user;\r\n    return this.service.update(id, dto, userId, role);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiOperation({ summary: 'Delete a file record' })\r\n  @ApiParam({ name: 'id', type: Number })\r\n  async remove(@Param('id', ParseIntPipe) id: number, @Req() req: AuthRequest) {\r\n    const { userId, role } = req.user;\r\n    return this.service.remove(id, userId, role);\r\n  }\r\n\r\n  @Get(':id/download')\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiOperation({ summary: 'Stream file content (inline if supported)' })\r\n  async download(@Param('id', ParseIntPipe) id: number, @Res() res: Response, @Req() req: AuthRequest) {\r\n    const { userId, role } = req.user;\r\n    const row = await this.service.get(id, userId, role);\r\n    try {\r\n      const data = await this.sftp.getStream(row.sftpPath);\r\n\r\n      res.setHeader('Content-Type', row.mimeType ?? 'application/octet-stream');\r\n      res.setHeader(\r\n        'Content-Disposition',\r\n        `inline; filename=\"${encodeURIComponent(row.fileName)}\"`,\r\n      );\r\n      if (row.fileSizeBytes != null) {\r\n        res.setHeader('Content-Length', String(row.fileSizeBytes));\r\n      }\r\n\r\n      if (Buffer.isBuffer(data)) return res.end(data);\r\n      (data as NodeJS.ReadableStream).pipe(res);\r\n    } catch {\r\n      res.status(404).send('File not found');\r\n    }\r\n  }\r\n\r\n  @Post('upload')\r\n  @Roles('SALES', 'ADMIN', 'USER')\r\n  @ApiConsumes('multipart/form-data')\r\n  @ApiOperation({\r\n    summary: 'Upload one or more files to SFTP and create DB rows',\r\n  })\r\n  @UseInterceptors(\r\n    FilesInterceptor('files', 20, {\r\n      storage: diskStorage({\r\n        destination: os.tmpdir(),\r\n        filename: (_req, file, cb) => {\r\n          const { base, ext } = splitExt(file.originalname);\r\n          const safeBase = sanitizeBase(base);\r\n          const ts = Date.now();\r\n          const id = randomUUID();\r\n          cb(null, `${safeBase}__${ts}_${id}${ext}`);\r\n        },\r\n      }),\r\n      limits: { fileSize: MAX_UPLOAD_BYTES },\r\n    }),\r\n  )\r\n  async upload(\r\n    @UploadedFiles() files: Express.Multer.File[],\r\n    @Body('saleOrderNumber') saleOrderNumber?: string,\r\n    @Body('description') description?: string,\r\n    @Req() req?: AuthRequest,\r\n  ) {\r\n    if (!files || files.length === 0) {\r\n      throw new BadRequestException('No files received');\r\n    }\r\n    \r\n    if (!req?.user) {\r\n        throw new BadRequestException('User information not available');\r\n    }\r\n\r\n    const { userId, role } = req.user;\r\n\r\n    return this.service.uploadAndCreate(files, {\r\n      saleOrderNumber: saleOrderNumber?.trim() || null,\r\n      description: description?.trim() || null,\r\n    }, userId, role);\r\n  }\r\n}"],"names":["ErpMaterialFileController","MAX_UPLOAD_BYTES","Number","process","env","splitExt","name","i","lastIndexOf","base","ext","slice","sanitizeBase","replace","list","query","req","userId","role","user","service","listBySaleOrder","saleOrderNumber","listBySaleOrderNumber","get","id","create","dto","update","remove","download","res","row","data","sftp","getStream","sftpPath","setHeader","mimeType","encodeURIComponent","fileName","fileSizeBytes","String","Buffer","isBuffer","end","pipe","status","send","upload","files","description","length","BadRequestException","uploadAndCreate","trim","summary","type","storage","diskStorage","destination","os","tmpdir","filename","_req","file","cb","originalname","safeBase","ts","Date","now","randomUUID","limits","fileSize","path","version"],"mappings":"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"}