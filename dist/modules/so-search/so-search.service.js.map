{"version":3,"sources":["../../../src/modules/so-search/so-search.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma.service';\r\n\r\nfunction convertBigInts(obj: any): any {\r\n  if (obj === null || obj === undefined) {\r\n    return obj;\r\n  }\r\n  if (typeof obj === 'bigint') {\r\n    return obj.toString();\r\n  }\r\n  if (Array.isArray(obj)) {\r\n    return obj.map(convertBigInts);\r\n  }\r\n  if (typeof obj === 'object') {\r\n    for (const key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        obj[key] = convertBigInts(obj[key]);\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\n@Injectable()\r\nexport class SoSearchService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  async findDetailsBySoNumber(saleOrderNumber: string, user: { userId: number; role: string }) {\r\n    const salesOrder = await this.prisma.salesOrder.findUnique({\r\n      where: { saleOrderNumber },\r\n      include: {\r\n        customer: true,\r\n        product: true,\r\n        transporter: true,\r\n        plantCode: true,\r\n        salesZone: true,\r\n        packConfig: true,\r\n        user: { select: { name: true } },\r\n        assignedUser: { select: { name: true } },\r\n      },\r\n    });\r\n\r\n    if (!salesOrder) {\r\n      throw new NotFoundException('Sales Order not found');\r\n    }\r\n\r\n    if (user.role === 'SALES' && salesOrder.userId !== user.userId) {\r\n      throw new ForbiddenException('You are not authorized to view this order.');\r\n    }\r\n\r\n    const dispatchSOs = await this.prisma.dispatch_SO.findMany({\r\n      where: { saleOrderNumber },\r\n      select: { dispatchId: true },\r\n    });\r\n\r\n    const dispatchIds = dispatchSOs.map((dso) => dso.dispatchId);\r\n\r\n    const dispatchInfo = await this.prisma.dispatch.findMany({\r\n      where: {\r\n        id: { in: dispatchIds },\r\n      },\r\n      include: {\r\n        customer: { select: { name: true, address: true } },\r\n        transporter: { select: { name: true } },\r\n      },\r\n    });\r\n\r\n    const materialDetails = await this.prisma.eRP_Material_Data.findMany({\r\n      where: { saleOrderNumber },\r\n      orderBy: { ID: 'asc' },\r\n    });\r\n\r\n    const latestMaterialUpdate = materialDetails.reduce((latest, current) => {\r\n      if (!latest.UpdatedDate || (current.UpdatedDate && new Date(current.UpdatedDate) > new Date(latest.UpdatedDate))) {\r\n        return current;\r\n      }\r\n      return latest;\r\n    }, materialDetails[0] || {});\r\n\r\n    const dispatchInfoWithUpdate = dispatchInfo.map(dispatch => ({\r\n      ...dispatch,\r\n      UpdatedBy: latestMaterialUpdate?.UpdatedBy,\r\n      UpdatedDate: latestMaterialUpdate?.UpdatedDate,\r\n    }));\r\n\r\n\r\n    const result = {\r\n      salesOrder,\r\n      dispatchInfo: dispatchInfoWithUpdate,\r\n      materialDetails,\r\n    };\r\n\r\n    return convertBigInts(result);\r\n  }\r\n}"],"names":["SoSearchService","convertBigInts","obj","undefined","toString","Array","isArray","map","key","Object","prototype","hasOwnProperty","call","findDetailsBySoNumber","saleOrderNumber","user","salesOrder","prisma","findUnique","where","include","customer","product","transporter","plantCode","salesZone","packConfig","select","name","assignedUser","NotFoundException","role","userId","ForbiddenException","dispatchSOs","dispatch_SO","findMany","dispatchId","dispatchIds","dso","dispatchInfo","dispatch","id","in","address","materialDetails","eRP_Material_Data","orderBy","ID","latestMaterialUpdate","reduce","latest","current","UpdatedDate","Date","dispatchInfoWithUpdate","UpdatedBy","result"],"mappings":";;;;+BAwBaA;;;eAAAA;;;wBAxBqD;+BACpC;;;;;;;;;;AAE9B,SAASC,eAAeC,GAAQ;IAC9B,IAAIA,QAAQ,QAAQA,QAAQC,WAAW;QACrC,OAAOD;IACT;IACA,IAAI,OAAOA,QAAQ,UAAU;QAC3B,OAAOA,IAAIE,QAAQ;IACrB;IACA,IAAIC,MAAMC,OAAO,CAACJ,MAAM;QACtB,OAAOA,IAAIK,GAAG,CAACN;IACjB;IACA,IAAI,OAAOC,QAAQ,UAAU;QAC3B,IAAK,MAAMM,OAAON,IAAK;YACrB,IAAIO,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACV,KAAKM,MAAM;gBAClDN,GAAG,CAACM,IAAI,GAAGP,eAAeC,GAAG,CAACM,IAAI;YACpC;QACF;IACF;IACA,OAAON;AACT;AAGO,IAAA,AAAMF,kBAAN,MAAMA;IAGX,MAAMa,sBAAsBC,eAAuB,EAAEC,IAAsC,EAAE;QAC3F,MAAMC,aAAa,MAAM,IAAI,CAACC,MAAM,CAACD,UAAU,CAACE,UAAU,CAAC;YACzDC,OAAO;gBAAEL;YAAgB;YACzBM,SAAS;gBACPC,UAAU;gBACVC,SAAS;gBACTC,aAAa;gBACbC,WAAW;gBACXC,WAAW;gBACXC,YAAY;gBACZX,MAAM;oBAAEY,QAAQ;wBAAEC,MAAM;oBAAK;gBAAE;gBAC/BC,cAAc;oBAAEF,QAAQ;wBAAEC,MAAM;oBAAK;gBAAE;YACzC;QACF;QAEA,IAAI,CAACZ,YAAY;YACf,MAAM,IAAIc,yBAAiB,CAAC;QAC9B;QAEA,IAAIf,KAAKgB,IAAI,KAAK,WAAWf,WAAWgB,MAAM,KAAKjB,KAAKiB,MAAM,EAAE;YAC9D,MAAM,IAAIC,0BAAkB,CAAC;QAC/B;QAEA,MAAMC,cAAc,MAAM,IAAI,CAACjB,MAAM,CAACkB,WAAW,CAACC,QAAQ,CAAC;YACzDjB,OAAO;gBAAEL;YAAgB;YACzBa,QAAQ;gBAAEU,YAAY;YAAK;QAC7B;QAEA,MAAMC,cAAcJ,YAAY3B,GAAG,CAAC,CAACgC,MAAQA,IAAIF,UAAU;QAE3D,MAAMG,eAAe,MAAM,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAACL,QAAQ,CAAC;YACvDjB,OAAO;gBACLuB,IAAI;oBAAEC,IAAIL;gBAAY;YACxB;YACAlB,SAAS;gBACPC,UAAU;oBAAEM,QAAQ;wBAAEC,MAAM;wBAAMgB,SAAS;oBAAK;gBAAE;gBAClDrB,aAAa;oBAAEI,QAAQ;wBAAEC,MAAM;oBAAK;gBAAE;YACxC;QACF;QAEA,MAAMiB,kBAAkB,MAAM,IAAI,CAAC5B,MAAM,CAAC6B,iBAAiB,CAACV,QAAQ,CAAC;YACnEjB,OAAO;gBAAEL;YAAgB;YACzBiC,SAAS;gBAAEC,IAAI;YAAM;QACvB;QAEA,MAAMC,uBAAuBJ,gBAAgBK,MAAM,CAAC,CAACC,QAAQC;YAC3D,IAAI,CAACD,OAAOE,WAAW,IAAKD,QAAQC,WAAW,IAAI,IAAIC,KAAKF,QAAQC,WAAW,IAAI,IAAIC,KAAKH,OAAOE,WAAW,GAAI;gBAChH,OAAOD;YACT;YACA,OAAOD;QACT,GAAGN,eAAe,CAAC,EAAE,IAAI,CAAC;QAE1B,MAAMU,yBAAyBf,aAAajC,GAAG,CAACkC,CAAAA,WAAa,CAAA;gBAC3D,GAAGA,QAAQ;gBACXe,WAAWP,sBAAsBO;gBACjCH,aAAaJ,sBAAsBI;YACrC,CAAA;QAGA,MAAMI,SAAS;YACbzC;YACAwB,cAAce;YACdV;QACF;QAEA,OAAO5C,eAAewD;IACxB;IApEA,YAAY,AAAiBxC,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;AAqEvD"}